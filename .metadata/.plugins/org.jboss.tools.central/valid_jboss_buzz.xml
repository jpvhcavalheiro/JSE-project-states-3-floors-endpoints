<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>How to install Java 8 an 11 on Red Hat Enterprise Linux 8 Beta</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QOJU2wpk_cU/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Hello World" scheme="searchisko:content:tags" /><category term="how-to" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><author><name>Severin Gehwolf</name></author><id>searchisko:content:id:jbossorg_blog-how_to_install_java_8_an_11_on_red_hat_enterprise_linux_8_beta</id><updated>2018-12-10T12:00:53Z</updated><published>2018-12-10T12:00:53Z</published><content type="html">&lt;p&gt;With Red Hat Enterprise Linux (RHEL) 8 Beta, two major versions of Java will be supported: Java 8 and Java 11. In this article, I’ll refer to Java 8 as JDK (Java Development Kit) 8 since we are focusing on the development aspect of using Java. JDK 8 and JDK 11 refer to Red Hat builds of OpenJDK 8 and OpenJDK 11 respectively. Through this article, you’ll learn how to install and run simple Java applications on RHEL 8 Beta, how to switch between two parallel installed major JDK versions via &lt;code&gt;alternatives&lt;/code&gt; and how to select one of the two JDKs on a per-application basis.&lt;span id="more-545727"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;TL; DR&lt;/h2&gt; &lt;p&gt;To install JDK 8, use:  (If you didn&amp;#8217;t  select &lt;em&gt;Make this user administrator&lt;/em&gt; during install see this article to &lt;a href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/"&gt;enable sudo on RHEL&lt;/a&gt;)&lt;/p&gt; &lt;pre&gt;$ sudo yum install java-1.8.0-openjdk-devel&lt;/pre&gt; &lt;p&gt;Then run Java “Hello World” as follows:&lt;/p&gt; &lt;pre&gt;$ cat &amp;#62; HelloWorld.java &amp;#60;&amp;#60;HELLO public class HelloWorld { public static void main(String[] args) { System.out.println("Hello World!"); } } HELLO $ javac HelloWorld.java &amp;#38;&amp;#38; java HelloWorld Hello World! &lt;/pre&gt; &lt;p&gt;To instal JDK 11, use:&lt;/p&gt; &lt;pre&gt;$ sudo yum install java-11-openjdk-devel &lt;/pre&gt; &lt;p&gt;Then run Java “Hello World” as follows:&lt;/p&gt; &lt;pre&gt;$ cat &amp;#62; HelloWorld.java &amp;#60;&amp;#60;HELLO public class HelloWorld { public static void main(String[] args) {   System.out.println("Hello World!");   } } HELLO $ /usr/lib/jvm/java-11-openjdk/bin/java HelloWorld.java Hello World! &lt;/pre&gt; &lt;p&gt;Yes, with JDK 11 you can directly run Java source files. The compilation step is handled for you.&lt;/p&gt; &lt;h2&gt;Watch the Video&lt;/h2&gt; &lt;p&gt;If you prefer to watch a short 4 minute demo video, here it is:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/0TMbIMb4pOA?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;The Longer Version&amp;#8230;&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s consider we have a freshly commissioned Red Hat Enterprise Linux 8 Beta machine and we&amp;#8217;d like to use it for running Java applications.&lt;/p&gt; &lt;p&gt;&lt;img class="alignnone size-medium wp-image-521117" src="https://developers.redhat.com/blog/wp-content/uploads/2018/09/OpenJDK_logo.svg_-300x85.png" alt="OpenJDK logo" width="300" height="85" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/09/OpenJDK_logo.svg_-300x85.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/09/OpenJDK_logo.svg_-768x217.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/09/OpenJDK_logo.svg_.png 1000w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;h2&gt;Finding available Java packages&lt;/h2&gt; &lt;p&gt;In order to figure out which RPM packages to install, we can ask the packaging system which ones provide the &lt;code&gt;java&lt;/code&gt; binary:&lt;/p&gt; &lt;pre&gt;$ yum provides \*/bin/java &lt;/pre&gt; &lt;p&gt;This command tells us that packages &lt;code&gt;java-1.8.0-openjdk-headless&lt;/code&gt; and &lt;code&gt;java-11-openjdk-headless&lt;/code&gt; both provide the &lt;code&gt;java&lt;/code&gt; binary. For the purpose of this article, we’re interested in the development kits, so we’ll install the -devel sub-packages instead. The -devel packages will pull in -headless packages as a dependency. If you already know that RHEL packages are OpenJDK builds, &lt;code&gt;yum list available&lt;/code&gt; might be useful too:&lt;/p&gt; &lt;pre&gt;$ yum list available \*openjdk\* &lt;/pre&gt; &lt;p&gt;For the purpose of this article, we are going to install JDK 8 and JDK 11 &lt;em&gt;&lt;strong&gt;in parallel&lt;/strong&gt;&lt;/em&gt;, and also install maven:&lt;/p&gt; &lt;pre&gt;$ sudo yum install java-1.8.0-openjdk-devel java-11-openjdk-devel maven &lt;/pre&gt; &lt;h2&gt;Switching Java Versions&lt;/h2&gt; &lt;p&gt;In the previous step, we installed JDK 8 and JDK 11 in parallel. At this point in time, JDK 8 is the main JDK on RHEL 8 Beta. That’s why you get this output when running &lt;code&gt;java -version&lt;/code&gt; on a fresh RHEL 8 Beta install:&lt;/p&gt; &lt;pre&gt;$ java -version openjdk version "1.8.0_181" OpenJDK Runtime Environment (build 1.8.0_181-b13) OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode) &lt;/pre&gt; &lt;p&gt;There are two ways to select the Java version you want:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Switch &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; binaries system wide via alternatives. This approach &lt;strong&gt;requires root privileges&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Select the JDK on a per-application basis by setting JAVA_HOME&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Selecting Java Versions with Alternatives&lt;/h3&gt; &lt;p&gt;&lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; binaries on RHEL 8 beta are managed by the alternatives system. This means a system administrator can switch the system &lt;code&gt;java&lt;/code&gt; (or &lt;code&gt;javac&lt;/code&gt;) to be something other than the default, JDK 8. The alternatives system uses priorities in order to determine which JDK should be available via &lt;code&gt;/usr/bin/java&lt;/code&gt;. JDK 8 has been given a higher priority on RHEL-8 Beta than JDK 11. But we are getting ahead of ourselves. First, lets see which binaries are managed by alternatives:&lt;/p&gt; &lt;pre&gt;$ alternatives --list &lt;/pre&gt; &lt;p&gt;We see that &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; are managed by alternatives. Next, we are going to switch to JDK 11, using the &lt;code&gt;alternatives --config&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ sudo alternatives --config java There are 2 programs which provide 'java'. Selection     Command ----------------------------------------------- *+ 1           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-8.el8.x86_64/jre/bin/java) 2          java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.1.13-4.el8.x86_64/bin/java) Enter to keep the current selection[+], or type selection number: 2 &lt;/pre&gt; &lt;p&gt;This will switch the system &lt;code&gt;java&lt;/code&gt; binary to JDK 11. We do the same for &lt;code&gt;javac&lt;/code&gt; since &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; are independently managed. There is no need to switch anything else as every other JDK binary will switch either with the &lt;code&gt;java&lt;/code&gt; or the &lt;code&gt;javac&lt;/code&gt; binary:&lt;/p&gt; &lt;pre&gt;$ sudo alternatives --config javac There are 2 programs which provide 'javac'. Selection     Command ----------------------------------------------- *+ 1           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-8.el8.x86_64/jre/bin/javac) 2          java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.1.13-4.el8.x86_64/bin/javac) Enter to keep the current selection[+], or type selection number: 2 &lt;/pre&gt; &lt;h3&gt;Switching alternatives non-interactively&lt;/h3&gt; &lt;p&gt;Here is an approach to switch to JDK 11, via alternatives, using non-interactive means, which comes in handy if you need to script it:&lt;/p&gt; &lt;pre&gt;$ JAVA_11=$(alternatives --display java | grep 'family java-11-openjdk' | cut -d' ' -f1) $ sudo alternatives --set java $JAVA_11 &lt;/pre&gt; &lt;p&gt;Similarly, switching to JDK 8 via alternatives by non-interactive means:&lt;/p&gt; &lt;pre&gt;$ JAVA_8=$(alternatives --display java | grep 'family java-1.8.0-openjdk' | cut -d' ' -f1) $ sudo alternatives --set java $JAVA_8 &lt;/pre&gt; &lt;p&gt;A similar approach can be followed for &lt;code&gt;javac&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Selecting Java Versions by Setting JAVA_HOME&lt;/h3&gt; &lt;p&gt;Many applications support using the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable, as a way to specify which JDK should be used to run the application. The examples below demonstrate this usage when running maven. This approach is handy if you don’t have root privileges, but both JDKs are already installed on your system.&lt;/p&gt; &lt;p&gt;Selecting JDK 8:&lt;/p&gt; &lt;pre&gt;$ JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk mvn --version Apache Maven 3.5.4 (Red Hat 3.5.4-5) Maven home: /usr/share/maven Java version: 1.8.0_191, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-9.el8.x86_64/jre Default locale: en_US, platform encoding: UTF-8 OS name: "linux", version: "4.18.0-2.el8.x86_64", arch: "amd64", family: "unix" &lt;/pre&gt; &lt;p&gt;Selecting JDK 11:&lt;/p&gt; &lt;pre&gt;$ JAVA_HOME=/usr/lib/jvm/java-11-openjdk mvn --version Apache Maven 3.5.4 (Red Hat 3.5.4-5) Maven home: /usr/share/maven Java version: 11.0.1, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-11-openjdk-11.0.1.13-6.el8.x86_64 Default locale: en_US, platform encoding: UTF-8 OS name: "linux", version: "4.18.0-2.el8.x86_64", arch: "amd64", family: "unix" &lt;/pre&gt; &lt;p&gt;This feature also comes in handy if you have multiple minor JDK versions installed as &lt;a href="https://developers.redhat.com/blog/2018/11/05/migrating-from-oracle-jdk-to-openjdk-on-red-hat-enterprise-linux-what-you-need-to-know/"&gt;Leo Ufimtsev described in his article for RHEL 7.&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Hello World on Steroids, JDK 11 Style&lt;/h2&gt; &lt;p&gt;With &lt;a href="https://openjdk.java.net/jeps/330"&gt;JEP 330&lt;/a&gt;, part of JDK 11, it’s now possible to run Java code in a script-like fashion. The feature is called “Launch Single-File Source-Code Programs” and allows one to use Java as scripting language. Here is a simple example:&lt;/p&gt; &lt;pre&gt;$ cat &amp;#62; factorial &amp;#60;&amp;#60;FACT #!/usr/lib/jvm/java-11-openjdk/bin/java --source 8 public class Factorial { private static void usage() { System.err.println("factorial &amp;#60;number&amp;#62;"); System.exit(1); } private static long factorial(int num) { if (num &amp;#60;= 1) { return 1; } if (num == 2) { return 2; } return factorial(num - 1) * num; } public static void main(String[] args) { if (args.length != 1) { usage(); } int num = -1; try { num = Integer.parseInt(args[0]); } catch (Exception e) { System.err.println("Error: Argument not a number!"); usage(); } System.out.println(factorial(num)); } } FACT $ chmod +x factorial $ ./factorial 6 720 &lt;/pre&gt; &lt;p&gt;Thank you. I hope you’ve found this article useful.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#038;title=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" data-a2a-url="https://developers.redhat.com/blog/2018/12/10/install-java-rhel8/" data-a2a-title="How to install Java 8 an 11 on Red Hat Enterprise Linux 8 Beta"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/10/install-java-rhel8/"&gt;How to install Java 8 an 11 on Red Hat Enterprise Linux 8 Beta&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QOJU2wpk_cU" height="1" width="1" alt=""/&gt;</content><summary>With Red Hat Enterprise Linux (RHEL) 8 Beta, two major versions of Java will be supported: Java 8 and Java 11. In this article, I’ll refer to Java 8 as JDK (Java Development Kit) 8 since we are focusing on the development aspect of using Java. JDK 8 and JDK 11 refer to Red Hat builds of OpenJDK 8 and OpenJDK 11 respectively. Through this article, you’ll learn how to install and run simple Java app...</summary><dc:creator>Severin Gehwolf</dc:creator><dc:date>2018-12-10T12:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/10/install-java-rhel8/</feedburner:origLink></entry><entry><title>Infinispan 9.4.4.Final and 10.0.0.Alpha2 out with Spring 5 support!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xpujyXWyW9o/infinispan-944final-and-1000alpha2-out.html" /><category term="10.0" scheme="searchisko:content:tags" /><category term="9.4" scheme="searchisko:content:tags" /><category term="alpha" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Galder Zamarreño</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_9_4_4_final_and_10_0_0_alpha2_out_with_spring_5_support</id><updated>2018-12-10T08:05:59Z</updated><published>2018-12-10T08:05:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;We've just released completed a couple of releases:&lt;br /&gt;&lt;br /&gt;Infinispan 9.4.4.Final (&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12340019"&gt;release notes&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Adds Spring 5 and Spring Boot 2.1 support&lt;/li&gt;&lt;li&gt;Fixes to can run with JDK 11.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Improves Cache#size() performance when using shared cache stores.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Infinispan 10.0.0.Alpha2 (&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12339364"&gt;release notes&lt;/a&gt;) contains same fixes as 9.4.4.Final plus&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Removes the CLI cache loader&lt;/li&gt;&lt;li&gt;RemoteCache#getBulk methods.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Don't forget to checkout the Infinispan 10 road map &lt;a href="https://blog.infinispan.org/2018/11/the-road-to-infinispan-10-alpha1.html"&gt;blog post&lt;/a&gt; to find out all that's coming.&lt;br /&gt;&lt;br /&gt;Please report any issues in our &lt;a href="https://issues.jboss.org/browse/ISPN"&gt;issue tracker&lt;/a&gt; and join the conversation in our &lt;a href="https://infinispan.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt; to shape up our next release.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Galder&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/FWylZWP4mos" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xpujyXWyW9o" height="1" width="1" alt=""/&gt;</content><summary>We've just released completed a couple of releases: Infinispan 9.4.4.Final (release notes) Adds Spring 5 and Spring Boot 2.1 support Fixes to can run with JDK 11.  Improves Cache#size() performance when using shared cache stores. Infinispan 10.0.0.Alpha2 (release notes) contains same fixes as 9.4.4.Final plus Removes the CLI cache loader RemoteCache#getBulk methods. Don't forget to checkout the In...</summary><dc:creator>Galder Zamarreño</dc:creator><dc:date>2018-12-10T08:05:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/FWylZWP4mos/infinispan-944final-and-1000alpha2-out.html</feedburner:origLink></entry><entry><title>Integration Key to Customer Experience - API Management Details</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7L-KYiOx97M/integration-key-to-customer-experience-api-management-details.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integration_key_to_customer_experience_api_management_details</id><updated>2018-12-10T08:11:41Z</updated><published>2018-12-10T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-h6FO-sdoH4A/W-AjgSgf-aI/AAAAAAAAtPw/JFoyKy0JPbU9hj0jggWQqESQc6Ywr0GaQCPcBGAYYCw/s1600/omnichannel-header.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="454" data-original-width="895" height="162" src="https://2.bp.blogspot.com/-h6FO-sdoH4A/W-AjgSgf-aI/AAAAAAAAtPw/JFoyKy0JPbU9hj0jggWQqESQc6Ywr0GaQCPcBGAYYCw/s320/omnichannel-header.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 4 - API gateway details&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In &lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-external-application-details.html" target="_blank"&gt;my previous article from this series&lt;/a&gt; we started diving into the details that determine how your integration becomes the key to transforming your customer experience.&lt;br /&gt;&lt;br /&gt;It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it's time to cover various blueprint details.&lt;br /&gt;&lt;br /&gt;This article takes you deeper in to specific elements (&lt;i&gt;API management and reverse proxy)&lt;/i&gt;&amp;nbsp;from the generic architectural overview.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Architectural details&lt;/h3&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;a href="https://2.bp.blogspot.com/-4S4pzHvZI0M/XApmRkMVyXI/AAAAAAAAtWg/RXfKAMzLN-8kDreVRnDygJ0cs4Z2rb6mACLcBGAs/s1600/Screenshot%2B2018-12-07%2Bat%2B13.23.05.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="86" data-original-width="914" height="30" src="https://2.bp.blogspot.com/-4S4pzHvZI0M/XApmRkMVyXI/AAAAAAAAtWg/RXfKAMzLN-8kDreVRnDygJ0cs4Z2rb6mACLcBGAs/s320/Screenshot%2B2018-12-07%2Bat%2B13.23.05.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;As mentioned before, the architectural details covered here are base on real customer integration solutions using open source technologies. The elements presented here are then the &lt;i&gt;generic common architectural elements&lt;/i&gt;&amp;nbsp;that I've identified and collected in a generic architectural blueprint. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented, but it's expected that they'll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colours that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now let's take a look at the details in this architecture and outline the elements uncovered in my research.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;API management&lt;/h3&gt;&lt;div&gt;When looking at gateways in to an organization, it's split between managing your API access and hiding the actual landscape behind accessing services in your organization. The first element identified was a management platform for handling API gateway activities.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-JUqqpSk5Z-s/XAp5WlmSCVI/AAAAAAAAtWs/jjl0POm9epchFLGAy08X1kUjTLrwrYZhgCLcBGAs/s1600/Screenshot%2B2018-12-07%2Bat%2B14.44.05.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="526" data-original-width="794" height="211" src="https://2.bp.blogspot.com/-JUqqpSk5Z-s/XAp5WlmSCVI/AAAAAAAAtWs/jjl0POm9epchFLGAy08X1kUjTLrwrYZhgCLcBGAs/s320/Screenshot%2B2018-12-07%2Bat%2B14.44.05.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;i&gt;API management &lt;/i&gt;refers to how access is provided to an organizations services. It's the critical path for access internally to services as well as externally.&lt;br /&gt;&lt;br /&gt;Researching customer portfolio solutions revealed that it's providing access to service interfaces, applications, and other integration microservices. It's providing scalability, reliability, and interface usage metrics that customer evaluate during operations monitoring.&lt;br /&gt;&lt;br /&gt;In the generic architecture blueprint it's managing interfaces from:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;frontend microservices (providing access to internal integration microservices)&lt;/li&gt;&lt;li&gt;process facade microservices (providing access to automated integration processes)&lt;/li&gt;&lt;li&gt;other applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt;&lt;/ul&gt;Part of the process of eventual access from external parties to your internal services through interfaces involves hiding the specific networking details. To do this we'll examine &lt;i&gt;reverse proxies &lt;/i&gt;details.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Reverse proxies&lt;/h3&gt;This covers various solutions found in research, but all are delivering the same functionality.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-xDE9ELWv7Bs/XAp5YYcjZiI/AAAAAAAAtWw/xR0dlME9crUvaWEvfixVJK1ymOufm9tXQCLcBGAs/s1600/Screenshot%2B2018-12-07%2Bat%2B14.44.14.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="530" data-original-width="792" height="214" src="https://4.bp.blogspot.com/-xDE9ELWv7Bs/XAp5YYcjZiI/AAAAAAAAtWw/xR0dlME9crUvaWEvfixVJK1ymOufm9tXQCLcBGAs/s320/Screenshot%2B2018-12-07%2Bat%2B14.44.14.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;The basic security is achieved through these proxies, because they are acting on requests from third parties. By retrieving requested resources for their clients, all external parties are prevented from having actual access to internal networks.&lt;br /&gt;&lt;br /&gt;Interactions on behalf of their clients provides them access to the following microservices:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;frontend microservices (providing access to internal integration microservices)&lt;/li&gt;&lt;li&gt;process facade microservices (providing access to automated integration processes)&lt;/li&gt;&lt;li&gt;other applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;These details are not all knowing, but should give you the guidance you'd need to get started in your own architectural situations.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div&gt;This overview covers the API and proxy elements that make up our architecture blueprint for omnichannel customer experience use case.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-architectural-elements.html" target="_blank"&gt;Generic common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-external-application-details.html" target="_blank"&gt;External application details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integration-key-to-customer-experience-api-management-details.html" target="_blank"&gt;API management details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Details of specific elements (container platform, storage services)&lt;/li&gt;&lt;li&gt;Application integration details&lt;/li&gt;&lt;li&gt;Dissecting several specific application integration architectures&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at the details of&amp;nbsp;specific elements in an architecture for omnichannel customer experience.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hXuAj8PX2dE:MuN9rsJCOXM:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hXuAj8PX2dE:MuN9rsJCOXM:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hXuAj8PX2dE:MuN9rsJCOXM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hXuAj8PX2dE:MuN9rsJCOXM:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/hXuAj8PX2dE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7L-KYiOx97M" height="1" width="1" alt=""/&gt;</content><summary>Part 4 - API gateway detailsIn my previous article from this series we started diving into the details that determine how your integration becomes the key to transforming your customer experience. It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it's time to cove...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-12-10T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/hXuAj8PX2dE/integration-key-to-customer-experience-api-management-details.html</feedburner:origLink></entry><entry><title>Starting your jBPM Business Application as a Service</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YspDjTE9zhc/starting-your-jbpm-business-application.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-starting_your_jbpm_business_application_as_a_service</id><updated>2018-12-10T03:41:12Z</updated><published>2018-12-10T03:26:00Z</published><content type="html">&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;In addition to starting your jBPM Business Application generated via &lt;a href="http://start.jbpm.org/"&gt;start.jbpm.org&lt;/a&gt; using the provided launch scripts, for example:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;&lt;code style="background-color: #f9f2f4; border-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 12.6px; padding: 2px 4px; white-space: nowrap;"&gt;./launch.sh clean install&lt;/code&gt;&lt;span style="font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;for unix or&amp;nbsp;&lt;/span&gt;&lt;code style="background-color: #f9f2f4; border-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 12.6px; padding: 2px 4px; white-space: nowrap;"&gt;launch.bat clean install&lt;/code&gt;&lt;span style="font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;for windows, you can also start and manage your business application as a service. This provides you with extra control of your app especially in production environments.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;&lt;span style="font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;Weather you are on Unix based system, Windows, or OSX the first step is to configure the business application to generate a fully executable jar. To do this locate your &lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="background-color: #f9f2f4; font-size: 12.6px; white-space: nowrap;"&gt;service&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;module of your business app and modify its&lt;/span&gt;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&amp;nbsp;pom.xml&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;to configure the&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;as follows:&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-CciPQMszsEE/XA3V52StSNI/AAAAAAAAhnc/2U2FVlypTBw7y73PUksMQB-Km3H2pi25QCLcBGAs/s1600/Screen%2BShot%2B2018-12-09%2Bat%2B9.15.49%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="376" data-original-width="850" height="141" src="https://3.bp.blogspot.com/-CciPQMszsEE/XA3V52StSNI/AAAAAAAAhnc/2U2FVlypTBw7y73PUksMQB-Km3H2pi25QCLcBGAs/s320/Screen%2BShot%2B2018-12-09%2Bat%2B9.15.49%2BPM.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;With this configuration building your business app will produce a fully executable jar.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Now let's see how we can start the business app as a service under different operating systems.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;b&gt;1. Unix/Linux Service&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Here we have two options, using&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;init.d&amp;nbsp;&lt;/span&gt;or&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;systemd&lt;/span&gt;&amp;nbsp;.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;a) To install our business app as an init.d service we need to create symlink to our executable jar, for example (using the default setup on start.jbpm.org):&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;sudo ln -s ~/business-application/business-application-service/target/&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.jar&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;/etc/init.d/&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.jar&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;after this you can start your business app with for example:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;service&amp;nbsp;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.jar start&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;b) To install our business app as a systemd service we need to create a script called&amp;nbsp;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.service&lt;/span&gt;&amp;nbsp;in the&amp;nbsp;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;on-service-1.0.SNAPS&amp;nbsp;&lt;/span&gt;directory (again we assume the default business app setup, the actual name has to reflect the real app name you have created during app creation on start.jbpm.org).&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;The script could look as follows:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;[Unit]&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;Description=&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;After=syslog.target&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;[Service]&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;User=&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;ExecStart=&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;~/business-application/business-application-service/target/&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.jar&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;SuccessExitStatus=143&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;[Install]&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;WantedBy=multi-user.target&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;Don't forget to change the description, user and execstart parameters to match your installation.&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;Now we can tell systemd to start our business app on system boot with for example:&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;systemctl enable&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.service&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;b&gt;2.&amp;nbsp;Windows Service&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;You can start your business application as a Windows service using&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;winsw&lt;/span&gt;&amp;nbsp;command. For details on how to do this please read detailed instructions on&amp;nbsp;&lt;a href="https://github.com/snicoll/spring-boot-daemon"&gt;https://github.com/snicoll/spring-boot-daemon&lt;/a&gt;.&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;b&gt;3.&amp;nbsp;OSX Service&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;If you are on OSX, you can use the&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;launchctl&lt;/span&gt;&amp;nbsp;command. To get started first we need to create our launch configuration under&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;~/Library/LaunchAgents&lt;/span&gt;&amp;nbsp;directory. So let's create a launch config file called&amp;nbsp;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.plist&amp;nbsp;&lt;/span&gt;which can look as follows (again, assuming the default generation settings):&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-9QhdIkzjEyA/XA3bsJJCBlI/AAAAAAAAhno/Lz-Dlx6hK1suOc_CYGaaI7mxO9i577i7ACLcBGAs/s1600/Screen%2BShot%2B2018-12-09%2Bat%2B9.16.40%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="306" data-original-width="1600" height="121" src="https://4.bp.blogspot.com/-9QhdIkzjEyA/XA3bsJJCBlI/AAAAAAAAhno/Lz-Dlx6hK1suOc_CYGaaI7mxO9i577i7ACLcBGAs/s640/Screen%2BShot%2B2018-12-09%2Bat%2B9.16.40%2BPM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;With the launch config created log out with your current user and log back in. Your business application has been started and you can right away access it under &lt;a href="localhost:8090"&gt;locahost:8090 &lt;/a&gt;in your browser.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;You can manage your business app service at this point using the&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;launchctl&lt;/span&gt;&amp;nbsp;command. For example to stop our business app service we would run:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;launchctl stop business-application-service-1.0-SNAPSHOT&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;and to stop our business application from being started automatically on system startup/login we can simply remove our launch configuration .plist file from ~/Library/LaunchAgents directory.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Hope this information is useful to some of you guys when choosing options on how to launch/deploy/manage your jBPM Business Applications.&lt;/div&gt;&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;&lt;span style="font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YspDjTE9zhc" height="1" width="1" alt=""/&gt;</content><summary>In addition to starting your jBPM Business Application generated via start.jbpm.org using the provided launch scripts, for example: ./launch.sh clean install for unix or launch.bat clean install for windows, you can also start and manage your business application as a service. This provides you with extra control of your app especially in production environments.  Weather you are on Unix based sys...</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2018-12-10T03:26:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2018/12/starting-your-jbpm-business-application.html</feedburner:origLink></entry><entry><title>Camel K on Knative: Agile Integration becoming Serverless</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_-oNfz_DOhM/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_nicolaferraro" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Nicola Ferraro</name></author><id>searchisko:content:id:jbossorg_blog-camel_k_on_knative_agile_integration_becoming_serverless</id><updated>2018-12-10T11:30:00Z</updated><published>2018-12-09T23:00:00Z</published><content type="html">&lt;p&gt;Knative is an open source project for adding serverless building blocks on Kubernetes and it’s constantly gaining traction among developers. In Apache Camel K, we’ve been working hard to leverage all the new possibilities that it provides and this article will show the results we’ve achieved so far.&lt;/p&gt; &lt;p&gt;If you’re not familiar with Camel K, you can &lt;a href="/2018/10/15/introducing-camel-k/"&gt;read the introductory blog post&lt;/a&gt;. Camel K provides a lot of new features when running on &lt;a href="https://github.com/knative/"&gt;Knative&lt;/a&gt;, but it also runs on plain &lt;strong&gt;“vanilla” Kubernetes and OpenShift&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Let’s start with the demo, then you can read the rest of the article to understand better what we’re doing.&lt;/p&gt; &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/btf_e2GniXM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""&gt;&lt;/iframe&gt; &lt;h2 id="so-what-is-knative-and-what-is-not"&gt;So, what is Knative? (and what is not)&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;Knative is not a complete serverless platform. Nor it’s going to become one.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Knative provides a collection of Kubernetes “Custom Resource Definitions” (CRD) together with related controllers that make it easier to build and deploy certain kind of applications&lt;br /&gt; on Kubernetes.&lt;/p&gt; &lt;p&gt;Knative building blocks can be roughly divided into &lt;strong&gt;3 major areas&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://github.com/knative/build"&gt;&lt;strong&gt;Knative Build area&lt;/strong&gt;&lt;/a&gt; provides custom resources for &lt;strong&gt;building applications from source code&lt;/strong&gt; and producing container images.&lt;/p&gt; &lt;p&gt;The CRDs provided in &lt;a href="https://github.com/knative/serving"&gt;&lt;strong&gt;Knative Serving area&lt;/strong&gt;&lt;/a&gt; allow to define services that that &lt;strong&gt;scale automatically&lt;/strong&gt; based on the load. Services can expose generic HTTP endpoints (such as REST): they are not necessarily “functions” (as in FaaS). These services can &lt;strong&gt;scale up&lt;/strong&gt; when the load increases, but also &lt;strong&gt;scale down to zero&lt;/strong&gt; when the load is absent for a certain amount of time. Services that are scaled down to zero don’t consume physical resources and they are brought up again as soon as they need to serve a new request.&lt;/p&gt; &lt;p&gt;The last part of Knative I’m going to describe (and the most important one for our purposes) is the &lt;a href="https://github.com/knative/eventing"&gt;&lt;strong&gt;Knative Eventing area&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="the-eventing-model"&gt;The Eventing Model&lt;/h2&gt; &lt;p&gt;Knative Eventing provides a set of building blocks (CRD) for developing event-based applications.&lt;/p&gt; &lt;p&gt;The main block is the &lt;strong&gt;Channel&lt;/strong&gt;. A channel is the abstraction of a publish-subscribe resource: you can push data into the channel, other services can subscribe to it to receive your data. The channel also decouples producers and consumers, so that producers can always push data into them and consumers can do processing when they are available.&lt;/p&gt; &lt;p&gt;Channels can be backed by different implementations. You can use a “in-memory” implementation, but also a complex one: currently &lt;strong&gt;Kafka&lt;/strong&gt;, &lt;strong&gt;GCP PubSub&lt;/strong&gt; or &lt;strong&gt;Nats&lt;/strong&gt;. Those are referred as &lt;strong&gt;provisioners&lt;/strong&gt; in the Knative area.&lt;/p&gt; &lt;p&gt;You may ask now: why don’t we just use Kafka or Nats directly, &lt;strong&gt;what’s the value added by Knative?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Just look at this schema.&lt;/p&gt; &lt;p style="text-align: center"&gt; &lt;img src="/images/post-knative-channel-model.png" alt="Knative Eventing Model" /&gt; &lt;caption align="bottom"&gt;&lt;i&gt;The Knative Eventing Model&lt;/i&gt;&lt;/caption&gt; &lt;/p&gt; &lt;p&gt;You can notice that the relationship between the channel and the service is somewhat &lt;strong&gt;reversed&lt;/strong&gt; respect to a classical scenario.&lt;/p&gt; &lt;p&gt;Normally, you define a service so that when it starts it connects to a messaging broker and start &lt;strong&gt;pulling&lt;/strong&gt; data from within that connection. In &lt;strong&gt;Knative eventing&lt;/strong&gt;, you subscribe to a channel (using a specific &lt;code class="highlighter-rouge"&gt;Subscription&lt;/code&gt; CRD), then it’s the channel that &lt;strong&gt;pushes&lt;/strong&gt; events towards your service.&lt;/p&gt; &lt;p&gt;The nice thing of all this, is that your service just receives messages through &lt;a href="https://github.com/cloudevents/spec"&gt;incoming Cloudevents&lt;/a&gt;, &lt;strong&gt;without&lt;/strong&gt; having to &lt;strong&gt;actively connect&lt;/strong&gt; to the broker. Your service &lt;strong&gt;becomes passive&lt;/strong&gt;. And since Knative provides other building blocks for autoscaling, your &lt;strong&gt;service scales up and down with the number of events in the channel&lt;/strong&gt; to which it’s subscribed. &lt;strong&gt;Scaling to zero is included&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Another important building block in the Knative Eventing space is the concept of &lt;strong&gt;EventSource&lt;/strong&gt;. A event source is a resource with the role of pushing data into a &lt;em&gt;Channel&lt;/em&gt;. E.g. you can use a GithubSource to foward GitHub generated webhook events into a channel.&lt;/p&gt; &lt;p&gt;Current plan in Knative is to start adding as many &lt;em&gt;EventSources&lt;/em&gt; as possible and this is one of the places where Camel and Camel K can do the difference. Camel is already able to connect to &lt;strong&gt;250+ different systems&lt;/strong&gt;. And Camel is also famous for the variety of &lt;strong&gt;enterprise integration patterns (EIP)&lt;/strong&gt; it implements: EIPs are really important in scenarios enabled by Knative Eventing.&lt;/p&gt; &lt;h2 id="how-camel-k-works"&gt;How Camel K works&lt;/h2&gt; &lt;p&gt;I’ve already described some of the internals of Camel K in the &lt;a href="/2018/10/15/introducing-camel-k/"&gt;introductory blog post&lt;/a&gt; and there will be more blog posts from the Camel K developers in the next days (so, stay tuned!).&lt;/p&gt; &lt;p&gt;The basic idea behind Camel K is explained in the following diagram.&lt;/p&gt; &lt;p style="text-align: center"&gt; &lt;img src="/images/post-camel-k-operator.png" alt="Camel K CRD and Operator" /&gt; &lt;caption align="bottom"&gt;&lt;i&gt;Camel K CRD and Operator&lt;/i&gt;&lt;/caption&gt; &lt;/p&gt; &lt;p&gt;Camel K users write their integration code (the Camel DSL) in a script file, using &lt;strong&gt;Groovy, Kotlin&lt;/strong&gt;, Java or even JavaScript or XML, and run it directly in the cloud platform.&lt;/p&gt; &lt;p&gt;What happens under the hood is that the script is &lt;strong&gt;wrapped into a “Integration” Custom Resource&lt;/strong&gt; and added to a Kubernetes namespace. The &lt;strong&gt;Camel K Operator&lt;/strong&gt; (based on &lt;a href="https://github.com/operator-framework/operator-sdk"&gt;operator SDK&lt;/a&gt;) will then detect the new Integration and &lt;strong&gt;materialize&lt;/strong&gt; it into running containers. Normally Camel K materializes an Integration into a Kubernetes Deployment, but when running on Knative, it uses &lt;strong&gt;auto-scaling services&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;What is really cool about Camel K is that it’s able to &lt;strong&gt;materialize and startup integrations in few seconds&lt;/strong&gt;. This helps a lot during the development phase, because you have immediate feedback on the code you’re writing. The &lt;a href="https://www.youtube.com/embed/9Y5JfYiiBwM"&gt;video&lt;/a&gt; accompanying the first blog post emphasizes this feature.&lt;/p&gt; &lt;h2 id="camel-k-and-knative"&gt;Camel K and Knative&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;Camel K fully supports Knative&lt;/strong&gt; since version v0.1.0. I often tend to remind (so you don’t forget it) that Camel K can also run on plain (= without Knative) OpenShift and “vanilla” Kubernetes, but without “serverless features”.&lt;/p&gt; &lt;p&gt;An important thing of the Knative model is that, since Knative is not a serverless platform, but a set of building blocks, you can run on top of Knative even &lt;strong&gt;multiple serverless platforms&lt;/strong&gt;. Knative does not only provide the building blocks for creating auto-scaling services, but also the building blocks for those platforms to &lt;strong&gt;communicate with each other&lt;/strong&gt; (eventing).&lt;/p&gt; &lt;p&gt;Camel K, thus, is not intended to run as &lt;em&gt;exclusive&lt;/em&gt; serverless platform on top of Knative, it’s rather a &lt;strong&gt;serverless integration layer&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;You are not expected to build generic functions with Camel, you can just use your FaaS platform to do it (provided that it works on top of Knative). But there are at least &lt;strong&gt;three places&lt;/strong&gt; where using &lt;strong&gt;Camel K is the best choice&lt;/strong&gt; you can do.&lt;/p&gt; &lt;h3 id="1-camel-k-for-creating-event-sources"&gt;1. Camel K for creating Event Sources&lt;/h3&gt; &lt;p&gt;Camel can easily push data into Knative channels, acting as event source.&lt;/p&gt; &lt;p&gt;We’ve added a new component in Camel K named “knative”, that allows publishing and subscribing to knative channels. You can use a Knative endpoint at the end of any route to create a event source. And you can use any combination of the 250+ Camel components as starting point.&lt;/p&gt; &lt;p&gt;For example, in the demo you’re going to see the following route:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'telegram:bots/&amp;lt;put-here-your-botfather-authorization&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;convertBodyTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:channel/messages'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;You can run it by simply executing &lt;code class="highlighter-rouge"&gt;kamel run telegram-feed.groovy&lt;/code&gt;. As already mentioned, &lt;code class="highlighter-rouge"&gt;kamel&lt;/code&gt; is used to simply wrap the code in a Kubernetes custom resource, while the materialization work is always accomplished inside Kubernetes by the &lt;strong&gt;Camel K Operator&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The simple script above generates a “event source”: an integration that forwards all messages sent to a specific bot on telegram to the “messages” Knative channel.&lt;/p&gt; &lt;h3 id="2-camel-k-for-enterprise-integration-patterns-eip"&gt;2. Camel K for Enterprise Integration Patterns (EIP)&lt;/h3&gt; &lt;p&gt;Camel K can also be used within Knative for its powerful enterprise integration patterns. You will see in the demo the following integration:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:channel/messages'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:channel/words'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It is an example of one of the simplest EIP available in Camel, the &lt;a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Sequencer.html"&gt;&lt;strong&gt;splitter EIP&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You run this integration as usual: &lt;code class="highlighter-rouge"&gt;kamel run splitter.groovy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In Camel you have tons of EIP that you can use out-of-the-box, even within Knative: content-based router, dynamic router, message filter, message transformation, recipient list… and many others.&lt;/p&gt; &lt;h3 id="3-camel-k-for-defining-integration-functions"&gt;3. Camel K for defining Integration Functions&lt;/h3&gt; &lt;p&gt;Many times you need to notify an external system that an event occurred in the serverless space. In these cases, it’s likely that you’ll write an integration function that gets executed when a specific event is received from a channel.&lt;/p&gt; &lt;p&gt;In the demo, you’ll se something like:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:channel/words'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'slack:#camel-k-tests'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This integration snippet is simply forwarding text messages to a Slack channel, but it could be also be doing transformations or enriching content with external data.&lt;/p&gt; &lt;h2 id="future-work"&gt;Future Work&lt;/h2&gt; &lt;p&gt;Camel K runs really well on Knative, but we want to provide a even better experience in the next months.&lt;/p&gt; &lt;p&gt;The value that Camel K adds to Knative is a easy way for people to write EventSources, EIP and Integration Functions. We need to enable people to just do that, but in a way that fits more closely the ideas that are being developed within the Knative space.&lt;/p&gt; &lt;p&gt;The roadmaps of Camel K and Knative are closely related.&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/apache/camel-k"&gt;Apache Camel K&lt;/a&gt; is already here. Grab it while it’s hot!&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_-oNfz_DOhM" height="1" width="1" alt=""/&gt;</content><summary>Knative is an open source project for adding serverless building blocks on Kubernetes and it’s constantly gaining traction among developers. In Apache Camel K, we’ve been working hard to leverage all the new possibilities that it provides and this article will show the results we’ve achieved so far. If you’re not familiar with Camel K, you can read the introductory blog post. Camel K provides a lo...</summary><dc:creator>Nicola Ferraro</dc:creator><dc:date>2018-12-09T23:00:00Z</dc:date><feedburner:origLink>https://www.nicolaferraro.me/2018/12/10/camel-k-on-knative/</feedburner:origLink></entry><entry><title>A Java developer’s first impressions from Corda</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sRfnY4gGn00/a-java-developers-first-impressions.html" /><category term="Blockchain" scheme="searchisko:content:tags" /><category term="Camel" scheme="searchisko:content:tags" /><category term="Corda" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_ofbizian" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><author><name>Bilgin Ibryam</name></author><id>searchisko:content:id:jbossorg_blog-a_java_developer_s_first_impressions_from_corda</id><updated>2018-12-07T14:56:49Z</updated><published>2018-12-07T14:56:00Z</published><content type="html">&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;i&gt;Follow me on&lt;a class="markup--anchor markup--p-anchor" data-href="http://twitter.com/bibryam" href="http://twitter.com/bibryam" rel="noopener nofollow noopener" target="_blank"&gt; twitter&lt;/a&gt; for other posts in this space. &lt;/i&gt;&lt;/span&gt;&lt;i&gt;If you prefer, read the same post on &lt;a href="https://medium.com/@bibryam/a-java-developers-first-impressions-from-corda-a5e3d6ce6e44" target="_blank"&gt;Medium&lt;/a&gt;.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Recently I had a chance to play a little bit with the open source permissioned JVM based blockchain platform &lt;a href="https://www.corda.net/"&gt;Corda&lt;/a&gt;. I was surprised to discover how it blends blockchain ideas with the commodity middleware technology and creates a new brief of decentralized enterprise integration. Below are my first impressions from it along with an &lt;a href="http://camel.apache.org/"&gt;Apache Camel&lt;/a&gt; connector contribution.&lt;br /&gt;&lt;h3&gt;What is Corda?&amp;nbsp;&lt;/h3&gt;Corda is a decentralized database and business process platform designed and built from the ground up for the implementation of legal agreements among identiﬁable parties. It is a DLT implementation heavily inﬂuenced by the Bitcoin's UTXO model and driven by the "enterprisy" requirements of the ﬁnancial industry. Corda is written in Kotlin, runs on the JVM and uses many of the proven middleware technologies. As such, compared to other blockchain platforms, Corda offers a low-entry barrier for Java developers experienced with integration, messaging and business processes management.&lt;br /&gt;&lt;h3&gt;Design Principles&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Permissioned (instead of permissionless network such as Bitcoin, Ethereum, etc) - this is a no surprise as enterprise blockchain use cases are primarily focused around automating the business integration challenges among identifiable parties.&lt;/li&gt;&lt;li&gt;Point-to-point (instead of global transaction broadcasts as in Bitcoin and others) - this enables data to be shared only among the nodes that need-to-know it which also leads to improved privacy and scalability.&lt;/li&gt;&lt;li&gt;UTXO model similar to Bitcoin (instead of the account model of Ethereum) - which is the part that makes Corda a DLT/Blockchain rather than a distributed business process management platform.&lt;/li&gt;&lt;li&gt;Re-use (instead of building everything from scratch) - this is the favorite part of Corda for me. Reuse of the Java ecosystem, reuse of relational databases, reuse of the messaging systems, etc.&lt;/li&gt;&lt;/ul&gt;The combination of these design principles makes Corda a very unique DLT platform among its competitors. It has elements of Bitcoin UTXO model, Ethereum smart contracts capabilities, Fabric private channels and most importantly - it reuses and builds on top of the existing battle-tested middleware technologies whenever possible.&lt;br /&gt;&lt;h3&gt;Main Concepts&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;A permissioned network made up of point-to-point communicating nodes.&lt;/li&gt;&lt;li&gt;A ledger where each node maintains its unique database, rather than a single store.&lt;/li&gt;&lt;li&gt;Notary nodes that prevent double spends and validate transactions.&lt;/li&gt;&lt;li&gt;Oracle services that only sign transactions if the included facts are true (slightly different to typical oracles).&lt;/li&gt;&lt;li&gt;State objects are immutable that represent on-ledger facts. The state is modified through transactions and stored on owning nodes only.&lt;/li&gt;&lt;li&gt;Contracts are deterministic JVM based functions that validate the transactions.&lt;/li&gt;&lt;li&gt;Transactions are candidate updates to the ledger and must be contractually valid and signed to be committed.&lt;/li&gt;&lt;li&gt;Flows encapsulate business processes and abstract all the networking, I/O, storage and concurrency. All smart contract activity occurs within the scope of flows which can be started through RPC calls or other flow calls. Flows do not run within sandbox as in the case of contracts but executed as regular Java code.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-i-kshGI02Vk/XAW8VUi5xNI/AAAAAAAALsY/At_eaqU5S5kyCeXJH_Zc61tkwf-kR_ZEgCLcBGAs/s1600/Screen%2BShot%2B2018-11-30%2Bat%2B14.48.07.png"&gt;&lt;img border="0" height="117" src="https://3.bp.blogspot.com/-i-kshGI02Vk/XAW8VUi5xNI/AAAAAAAALsY/At_eaqU5S5kyCeXJH_Zc61tkwf-kR_ZEgCLcBGAs/s400/Screen%2BShot%2B2018-11-30%2Bat%2B14.48.07.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;i&gt;A Corda Flow that interacts with Node A, Node B, and the Notary Pool&lt;/i&gt;&lt;/div&gt;&lt;br /&gt;In Ethereum, the concepts of smart contracts encapsulate both the business logic and the state into one. In Corda, state and contract objects are separate concepts: the state is persisted, and contracts are deterministic functions (meaning all transaction validations that are performed by the contracts on different nodes and should produce the same result).&lt;br /&gt;In addition, Corda introduces the concept of a Flow (kind of a distributed orchestration engine), which in Ethereum world would be similar to contracts calling each other (kind of choreography). But Corda flows are not deployed into all nodes, they are not part of the shared state, but rather represent standard JVM code, specific to individual nodes.&lt;br /&gt;&lt;h3&gt;Technology Stack&lt;/h3&gt;Driven by the "re-use" principle, Corda is reusing existing storage, messaging and Java solutions. While blockchain platforms such as &lt;a href="https://www.jpmorgan.com/global/Quorum"&gt;Quorum&lt;/a&gt; take a permissionless PoW framework such as Ethereum, and make it "enterprisy" by replacing the consensus mechanism, removing gas payments, introducing private transactions, etc., Corda takes the opposite approach. Corda, takes existing middleware technologies and applies the Bitcoin concept of UTXO and creates a new class of software that can be described as "a distributed business process and state management system". Corda achieves that through the use of commodity technologies such as relational databases for storage, and messaging for state replication and distributed business process coordination.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-JBpE3TPVdGI/XAW9yjGselI/AAAAAAAALso/mlV5iKi-ErAFDcEl0HBrnwkn4GPUxUQegCEwYBhgL/s1600/node-architecture.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1165" data-original-width="1600" height="291" src="https://4.bp.blogspot.com/-JBpE3TPVdGI/XAW9yjGselI/AAAAAAAALso/mlV5iKi-ErAFDcEl0HBrnwkn4GPUxUQegCEwYBhgL/s400/node-architecture.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&amp;nbsp;&lt;i&gt;Main components of Corda&lt;/i&gt;&lt;/div&gt;&lt;ul&gt;&lt;/ul&gt;High level technology stack:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;It builds with Gradle, requires Oracle JDK 8, runs on &lt;a href="https://docs.corda.net/head/docker-image.html"&gt;Docker&lt;/a&gt; (and Linux on production).&lt;/li&gt;&lt;li&gt;A Corda node is a flat classpath JVM application (no Spring Boot, App Server, or OSGI container required).&lt;/li&gt;&lt;li&gt;Storage: relational database - H2, PostgreSQL, SQL Server, OracleDB.&lt;/li&gt;&lt;li&gt;Object-Relational Mapping: JPA - &lt;a href="http://hibernate.org/"&gt;JBoss Hibernate&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Messaging: AMQP based - &lt;a href="https://activemq.apache.org/artemis/"&gt;Apache ActiveMQ /Artemis&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Metrics: Jolokia&lt;/li&gt;&lt;li&gt;Other: Quasar, Kryo, Shiro, Jackson, etc,&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Apache Camel Integration with Corda&lt;/h3&gt;Driven by my background in enterprise integration and interest in the blockchain, recently I created and wrote about &lt;a href="https://medium.com/@bibryam/enterprise-integration-for-ethereum-fa67a1577d43"&gt;Apache Camel connector for Ethereum and Quorum.&lt;/a&gt; In the same spirit of exploring enterprise blockchains, I created &lt;a href="https://github.com/apache/camel/blob/master/components/camel-corda/src/main/docs/corda-component.adoc"&gt;an Apache Camel connector for Corda&lt;/a&gt;. The connector uses Corda-RPC library and provides Camel producer/consumer endpoints to interact with a Corda node. The component offers a consumer for signing up and receiving events from a Corda node, and producer to send commands to a node.&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-f8VhuJzqVh4/XAqJqncz8rI/AAAAAAAALtM/vHZqxcFSlcQBo60MvcHmi3d8y6rvTafEwCLcBGAs/s1600/Screen%2BShot%2B2018-12-07%2Bat%2B14.05.06.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="286" data-original-width="1438" height="77" src="https://3.bp.blogspot.com/-f8VhuJzqVh4/XAqJqncz8rI/AAAAAAAALtM/vHZqxcFSlcQBo60MvcHmi3d8y6rvTafEwCLcBGAs/s400/Screen%2BShot%2B2018-12-07%2Bat%2B14.05.06.png" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Apache Camel connector for Corda&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&amp;nbsp;Here is the full set of supported operations:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Consumer&lt;/b&gt;: vaultTrack, vaultTrackBy, vaultTrackByCriteria, vaultTrackByWithPagingSpec, vaultTrackByWithSorting, stateMachinesFeed, networkMapFeed, networkMapFeed, stateMachineRecordedTransactionMappingFeed, startTrackedFlowDynamic.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Producer&lt;/b&gt;: currentNodeTime, getProtocolVersion, networkMapSnapshot, stateMachinesSnapshot, stateMachineRecordedTransactionMappingSnapshot, registeredFlows, clearNetworkMapCache, isFlowsDrainingModeEnabled, setFlowsDrainingModeEnabled, notaryIdentities, nodeInfo, addVaultTransactionNote, getVaultTransactionNotes, uploadAttachment, attachmentExists, openAttachment, queryAttachments, nodeInfoFromParty, notaryPartyFromX500Name, partiesFromName, partyFromKey, wellKnownPartyFromX500Name, wellKnownPartyFromAnonymous, startFlowDynamic, vaultQuery, vaultQueryBy, vaultQueryByCriteria, vaultQueryByWithPagingSpec, vaultQueryByWithSorting.&lt;br /&gt;&lt;br /&gt;To find more about Camel, and how it can complement Corda solutions, read the Camel Ethereum connector article linked above.&lt;br /&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;Public permissionless blockchains are facing serious technical challenges in the form of scaling, governance, energy waste and non-technical challenges with speculation, regulation, general usefulness and applicability. They have the noble idea of decentralizing everything but are yet to prove that the technology and the economic models are capable of delivering that vision.&lt;br /&gt;&lt;br /&gt;On the other hand, private permissioned blockchains such as Corda, Fabric, Quorum are immune to these technical challenges as they target use cases with a smaller number of identiﬁable parties in regulated markets. Their goal is to improve and automate the existing business models of the enterprise rather than trying to discover brand new economic models. In a sense, permissioned blockchains represent the next generation cross-organization business process and data integration systems.&lt;br /&gt;&lt;br /&gt;In this space, Corda is not revolutionary, but rather an evolutionary platform built on top of a well-estabilished storage and middleware technology ecosystems. The blockchain technology still has to prove itself, and building on top of a proven technology is the first step.&lt;br /&gt;&lt;br /&gt;My next stop on exploring enterprise blockchains will be &lt;a href="https://www.hyperledger.org/projects/fabric"&gt;Hyperledger Fabric&lt;/a&gt;. Take care.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sRfnY4gGn00" height="1" width="1" alt=""/&gt;</content><summary>Follow me on twitter for other posts in this space. If you prefer, read the same post on Medium. Recently I had a chance to play a little bit with the open source permissioned JVM based blockchain platform Corda. I was surprised to discover how it blends blockchain ideas with the commodity middleware technology and creates a new brief of decentralized enterprise integration. Below are my first imp...</summary><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2018-12-07T14:56:00Z</dc:date><feedburner:origLink>http://www.ofbizian.com/2018/12/a-java-developers-first-impressions.html</feedburner:origLink></entry><entry><title>IP packet buffering in OVN</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nrEajsLtwQs/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="IP buffering" scheme="searchisko:content:tags" /><category term="network function virtualization" scheme="searchisko:content:tags" /><category term="Networking" scheme="searchisko:content:tags" /><category term="NFV" scheme="searchisko:content:tags" /><category term="open virtual network" scheme="searchisko:content:tags" /><category term="Open vSwitch" scheme="searchisko:content:tags" /><category term="OpenStack" scheme="searchisko:content:tags" /><category term="OVN" scheme="searchisko:content:tags" /><category term="OVS" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="RHEV" scheme="searchisko:content:tags" /><category term="virtual networking" scheme="searchisko:content:tags" /><author><name>Lorenzo Bianconi</name></author><id>searchisko:content:id:jbossorg_blog-ip_packet_buffering_in_ovn</id><updated>2018-12-07T13:00:57Z</updated><published>2018-12-07T13:00:57Z</published><content type="html">&lt;p&gt;&lt;em&gt;&lt;a href="http://www.openvswitch.org/support/dist-docs/ovn-architecture.7.html"&gt;Open Virtual Network&lt;/a&gt; (OVN)&lt;/em&gt; is a subproject of &lt;a href="http://www.openvswitch.org/"&gt;Open vSwitch (OVS)&lt;/a&gt;, a performant, programmable, multi-platform virtual switch. OVN adds to the OVS existing capabilities the support for overlay networks by introducing virtual network abstractions such as virtual switches and routers. Moreover, OVN provides native methods for setting up Access Control Lists (ACLs) and network services such as DHCP. Many Red Hat products, such as Red Hat OpenStack Platform and Red Hat Virtualization, are now using OVN, and &lt;a href="https://developers.redhat.com/products/openshift/overview/"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; will be using OVN soon.&lt;/p&gt; &lt;p&gt;In this article, I&amp;#8217;ll cover how OVN &lt;em&gt;ARP/ND_NS actions &lt;/em&gt;work, the main limitations in the current implementation, and how to overcome those. First, I&amp;#8217;ll provide a brief overview of OVN&amp;#8217;s architecture to facilitate the discussion:&lt;/p&gt; &lt;p&gt;&lt;span id="more-537047"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;OVN architecture&lt;/h2&gt; &lt;p&gt;An OVN deployment consists of several components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The OVN/CMS plugin (for example, Neutron) is the CMS interface component for OVN. The plugin’s main purpose is to translate the CMS’s notion of the logical network configuration into an intermediate representation composed by logical switches and routers that can be interpreted by OVN.&lt;/li&gt; &lt;li&gt;The OVN northbound database (NBDB) is an OVSDB instance responsible for storing network representation received from the CMS plugin. The OVN northbound database has only two clients: the OVN/CMS plugin and the &lt;code&gt;ovn−northd&lt;/code&gt; daemon.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;ovn−northd&lt;/code&gt; daemon connects to the OVN northbound database and to the OVN southbound database. It translates the logical network configuration in terms of conventional network concepts, taken from the OVN northbound database, into logical datapath flows in the OVN southbound database&lt;/li&gt; &lt;li&gt;The OVN southbound database (SBDB), is also an OVSDB database, but it is characterized by a quite different schema with respect to the northbound database. In particular, instead of familiar networking concepts, the southbound database defines the network in terms of match-action rule collections called &lt;em&gt;logical flows&lt;/em&gt;. The logical flows, while conceptually similar to OpenFlow flows, exploit logical concepts, such as virtual machine instances, instead of physical ones, such as physical Ethernet ports. In particular, the southbound database includes three data types: &lt;ul&gt; &lt;li&gt;Physical network data, such as the VM&amp;#8217;s IP address and tunnel encapsulation format&lt;/li&gt; &lt;li&gt;Logical network data, such as packet forwarding mode&lt;/li&gt; &lt;li&gt;The binding relationship between the physical network and logical network&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/architecture.png"&gt;&lt;img class=" aligncenter wp-image-537157 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/architecture.png" title="OVN Architecture" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/architecture.png" alt="OVN architecture" width="600" height="600" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/architecture.png 500w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/architecture-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/architecture-300x300.png 300w" sizes="(max-width: 600px) 100vw, 600px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;L2 address resolution problem&lt;/h2&gt; &lt;p&gt;A typical OVN deployment is shown below where the overlay network is connected to an external one through a &lt;em&gt;localnet&lt;/em&gt; port (&lt;code&gt;ext-localnet&lt;/code&gt;, in this case):&lt;/p&gt; &lt;p style="text-align: center;"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/ovn_ip_buff_diagram-e1542277877943.png"&gt;&lt;img class=" aligncenter wp-image-537227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/11/ovn_ip_buff_diagram-e1542277877943.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/ovn_ip_buff_diagram.png" alt="Typical OVN deployment " width="600" height="600" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Below, is shown the related OVN NBDB network configuration:&lt;/p&gt; &lt;pre&gt;switch 35b34afe-ee16-469b-9893-80b024510f33 (sw2)      port sw2-port4           addresses: ["00:00:02:00:00:04 1.2.0.4 2001:db8:2::14 "]      port sw2-port3           addresses: ["00:00:02:00:00:03 1.2.0.3 2001:db8:2::13 "]      port sw2-portr0           type: router           addresses: ["00:00:02:ff:00:02"]           router-port: lrp2 switch c16e344a-c3fe-4884-9121-d1d3a2a9d9b1 (sw1)      port sw1-port1           addresses: ["00:00:01:00:00:01 1.1.0.1 2001:db8:1::11 "]      port sw1-portr0           type: router           addresses: ["00:00:01:ff:00:01"]           router-port: lrp1      port sw1-port2           addresses: ["00:00:01:00:00:02 1.1.0.2 2001:db8:1::12 "] switch ee2b44de-7d2b-4ffa-8c4c-2e1ac7997639 (sw-ext)      port ext-localnet            type: localnet            addresses: ["unknown"]      port ext-lr0            type: router            addresses: ["02:0a:7f:00:01:29"]            router-port: lr0-ext router 681dfe85-6f90-44e3-9dfe-f1c81f4cfa32 (lr0)      port lrp2            mac: "00:00:02:ff:00:02"            networks: ["1.2.254.254/16", "2001:db8:2::1/64"]      port lr0-ext            mac: "02:0a:7f:00:01:29"            networks: ["192.168.123.254/24", "2001:db8:f0f0::1/64"]      port lrp1            mac: "00:00:01:ff:00:01"            networks: ["1.1.254.254/16", "2001:db8:1::1/64"] &lt;/pre&gt; &lt;p&gt;Whenever a device belonging to the overlay network (for example, PC1) tries to reach an external device (for example, PC-EXT), it forwards the packet to the OVN logical router (LR0). If LR0 has not already resolved the L2/L3 address correspondence for PC-EXT, it will send an ARP frame (or a Neighbor Discovery for IPv6 traffic) for PC-EXT. The current OVN implementation employs &lt;em&gt;ARP action&lt;/em&gt; to perform L2 address resolution. In other words, OVN will instruct OVS to perform a &amp;#8220;packet in&amp;#8221; action whenever it needs to forward an IP packet for an unknown L2 destination. The ARP action replaces the IPv4 packet being processed with an ARP frame that is forwarded on the external network to resolve the PC-EXT MAC address. Below is shown the IPv4/IPv6 OVN SBDB rules corresponding to that processing:&lt;/p&gt; &lt;pre&gt;table=10(lr_in_arp_request ), priority=100 , match=(eth.dst == 00:00:00:00:00:00), action=(arp { eth.dst = ff:ff:ff:ff:ff:ff; arp.spa = reg1; arp.tpa = reg0; arp.op = 1; output; };) table=10(lr_in_arp_request ), priority=100 , match=(eth.dst == 00:00:00:00:00:00), action=(nd_ns { nd.target = xxreg0; output; };) &lt;/pre&gt; &lt;p&gt;The main drawback introduced by the described processing is the loss of the first packet of the connection (as shown in the following ICMP traffic) introducing latency in TCP connections established with devices not belonging to the overlay network:&lt;/p&gt; &lt;pre&gt;PING 192.168.123.10 (192.168.123.10) 56(84) bytes of data. 64 bytes from 192.168.123.10: icmp_seq=2 ttl=63 time=0.649 ms 64 bytes from 192.168.123.10: icmp_seq=3 ttl=63 time=0.321 ms 64 bytes from 192.168.123.10: icmp_seq=4 ttl=63 time=0.331 ms 64 bytes from 192.168.123.10: icmp_seq=5 ttl=63 time=0.137 ms 64 bytes from 192.168.123.10: icmp_seq=6 ttl=63 time=0.125 ms 64 bytes from 192.168.123.10: icmp_seq=7 ttl=63 time=0.200 ms 64 bytes from 192.168.123.10: icmp_seq=8 ttl=63 time=0.244 ms 64 bytes from 192.168.123.10: icmp_seq=9 ttl=63 time=0.224 ms 64 bytes from 192.168.123.10: icmp_seq=10 ttl=63 time=0.271 ms --- 192.168.123.10 ping statistics --- 10 packets transmitted, 9 received, 10% packet loss, time 9214ms &lt;/pre&gt; &lt;h2&gt;Proposed solution: Add buffering support for IP packets&lt;/h2&gt; &lt;p&gt;In order to overcome this limitation, a &lt;a href="https://github.com/openvswitch/ovs/commit/d7abfe39cfd234227bb6174b7f959a16dc803b83"&gt;solution&lt;/a&gt; for adding buffering support for IP packets has been proposed by which incoming IP frames that have no corresponding L2 address yet are queued and will be re-injected to &lt;code&gt;ovs-vswitchd&lt;/code&gt; as soon as the neighbor discovery process is completed.&lt;/p&gt; &lt;p&gt;Repeating the above tests proves that even the first ICMP echo request is received by PC-EXT:&lt;/p&gt; &lt;pre&gt;PING 192.168.123.10 (192.168.123.10) 56(84) bytes of data. 64 bytes from 192.168.123.10: icmp_seq=1 ttl=63 time=1.92 ms 64 bytes from 192.168.123.10: icmp_seq=2 ttl=63 time=0.177 ms 64 bytes from 192.168.123.10: icmp_seq=3 ttl=63 time=0.277 ms 64 bytes from 192.168.123.10: icmp_seq=4 ttl=63 time=0.139 ms 64 bytes from 192.168.123.10: icmp_seq=5 ttl=63 time=0.281 ms 64 bytes from 192.168.123.10: icmp_seq=6 ttl=63 time=0.247 ms 64 bytes from 192.168.123.10: icmp_seq=7 ttl=63 time=0.211 ms 64 bytes from 192.168.123.10: icmp_seq=8 ttl=63 time=0.187 ms 64 bytes from 192.168.123.10: icmp_seq=9 ttl=63 time=0.439 ms 64 bytes from 192.168.123.10: icmp_seq=10 ttl=63 time=0.253 ms --- 192.168.123.10 ping statistics --- 10 packets transmitted, 10 received, 0% packet loss, time 9208ms &lt;/pre&gt; &lt;h2&gt;Future development&lt;/h2&gt; &lt;p&gt;A possible future enhancement to the described methodology could be to use the developed IP buffering infrastructure to queue packets waiting for given events and then send them back to &lt;code&gt;ovs-vswitchd&lt;/code&gt; as soon as the requested message has been received. For example, we can rely on the IP buffering infrastructure to queue packets designated for an OpenShift pod that has not completed the bootstrap phase yet. Stay tuned &lt;img src="https://s.w.org/images/core/emoji/2.4/72x72/1f642.png" alt="" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt;&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;p&gt;Here are some other articles related to OVN and OVS:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/08/how-to-create-an-open-virtual-network-distributed-gateway-router/"&gt;How to create an Open Virtual Network distributed gateway router&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/03/ovn-dynamic-ip-address-management/"&gt;Dynamic IP address management in Open Virtual Network (OVN): Part One&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/27/dynamic-ip-address-management-in-open-virtual-network-ovn-part-two/"&gt;Dynamic IP address management in Open Virtual Network (OVN): Part Two&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/23/non-root-open-vswitch-rhel/"&gt;Non-root Open vSwitch in RHEL&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/16/ovs-dpdk-hugepage-memory/"&gt;Open vSwitch-DPDK: How Much Hugepage Memory?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/06/27/open-vswitch-qinq-performance/"&gt;Open vSwitch: QinQ Performance&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#38;linkname=IP%20packet%20buffering%20in%20OVN" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#38;linkname=IP%20packet%20buffering%20in%20OVN" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#38;linkname=IP%20packet%20buffering%20in%20OVN" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#38;linkname=IP%20packet%20buffering%20in%20OVN" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#38;linkname=IP%20packet%20buffering%20in%20OVN" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#38;linkname=IP%20packet%20buffering%20in%20OVN" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#38;linkname=IP%20packet%20buffering%20in%20OVN" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#38;linkname=IP%20packet%20buffering%20in%20OVN" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fip-packet-buffering-in-ovn%2F&amp;#038;title=IP%20packet%20buffering%20in%20OVN" data-a2a-url="https://developers.redhat.com/blog/2018/12/07/ip-packet-buffering-in-ovn/" data-a2a-title="IP packet buffering in OVN"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/07/ip-packet-buffering-in-ovn/"&gt;IP packet buffering in OVN&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nrEajsLtwQs" height="1" width="1" alt=""/&gt;</content><summary>Open Virtual Network (OVN) is a subproject of Open vSwitch (OVS), a performant, programmable, multi-platform virtual switch. OVN adds to the OVS existing capabilities the support for overlay networks by introducing virtual network abstractions such as virtual switches and routers. Moreover, OVN provides native methods for setting up Access Control Lists (ACLs) and network services such as DHCP. Ma...</summary><dc:creator>Lorenzo Bianconi</dc:creator><dc:date>2018-12-07T13:00:57Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/07/ip-packet-buffering-in-ovn/</feedburner:origLink></entry><entry><title>Kubernetes: Your Next Application Server</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/NVaDSF_wMgk/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devnation" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><author><name>Burr Sutter</name></author><id>searchisko:content:id:jbossorg_blog-kubernetes_your_next_application_server</id><updated>2018-12-07T12:56:02Z</updated><published>2018-12-07T12:56:02Z</published><content type="html">&lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/K6gM4wFEmwA?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;Watch Burr Sutter in this week&amp;#8217;s DevNation change how you think about application servers in today&amp;#8217;s world of containers.&lt;/p&gt; &lt;p&gt;Get the slides: &lt;a href="http://bit.ly/kubeappserver"&gt;bit.ly/kubeappserver&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In the Java ecosystem, we have historically been enamored with the concept of the “application server,” the runtime engine that not only gave us portable APIs such as JMS, JAX-RS, JSF, and EJB but also gave us critical runtime infrastructure for things such as farm deployments, configuration, load-balancing, failover, distributed management, and monitoring.&lt;/p&gt; &lt;p&gt;This session demonstrates how Kubernetes and OpenShift® give you the critical runtime infrastructure you need for JVM-based applications—whether they be Java EE, Spring, MicroProfile, Vert.x, Kotlin, or others—because in a cloud native world, your APIs can be whatever best fits your project&amp;#8217;s requirements.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#38;linkname=Kubernetes%3A%20Your%20Next%20Application%20Server" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#38;linkname=Kubernetes%3A%20Your%20Next%20Application%20Server" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#38;linkname=Kubernetes%3A%20Your%20Next%20Application%20Server" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#38;linkname=Kubernetes%3A%20Your%20Next%20Application%20Server" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#38;linkname=Kubernetes%3A%20Your%20Next%20Application%20Server" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#38;linkname=Kubernetes%3A%20Your%20Next%20Application%20Server" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#38;linkname=Kubernetes%3A%20Your%20Next%20Application%20Server" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#38;linkname=Kubernetes%3A%20Your%20Next%20Application%20Server" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F07%2Fkubernetes-application-server%2F&amp;#038;title=Kubernetes%3A%20Your%20Next%20Application%20Server" data-a2a-url="https://developers.redhat.com/blog/2018/12/07/kubernetes-application-server/" data-a2a-title="Kubernetes: Your Next Application Server"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/07/kubernetes-application-server/"&gt;Kubernetes: Your Next Application Server&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/NVaDSF_wMgk" height="1" width="1" alt=""/&gt;</content><summary>Watch Burr Sutter in this week’s DevNation change how you think about application servers in today’s world of containers. Get the slides: bit.ly/kubeappserver In the Java ecosystem, we have historically been enamored with the concept of the “application server,” the runtime engine that not only gave us portable APIs such as JMS, JAX-RS, JSF, and EJB but also gave us critical runtime infrastructure...</summary><dc:creator>Burr Sutter</dc:creator><dc:date>2018-12-07T12:56:02Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/07/kubernetes-application-server/</feedburner:origLink></entry><entry><title>All Things Open 2018 - Lightning Talk on How To Jump Start a Career in Open Source (video)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/w-9zqjjkd58/all-things-open-2018-lightning-talk-video.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Cloud Suite" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="video" scheme="searchisko:content:tags" /><category term="xpaas" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-all_things_open_2018_lightning_talk_on_how_to_jump_start_a_career_in_open_source_video</id><updated>2018-12-07T06:00:09Z</updated><published>2018-12-07T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;a href="https://4.bp.blogspot.com/-QbBdIvvbiMQ/W8XsxbzP5cI/AAAAAAAAtO0/0jxO5kPqfE0l00-kwZ_UKlONsJXpnjTUwCLcBGAs/s1600/Screen%2BShot%2B2018-10-16%2Bat%2B15.50.43.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="all things open" border="0" data-original-height="428" data-original-width="827" height="165" src="https://4.bp.blogspot.com/-QbBdIvvbiMQ/W8XsxbzP5cI/AAAAAAAAtO0/0jxO5kPqfE0l00-kwZ_UKlONsJXpnjTUwCLcBGAs/s320/Screen%2BShot%2B2018-10-16%2Bat%2B15.50.43.png" title="" width="320" /&gt;&lt;/a&gt;Last October I was in Raleigh, North Carolina speaking at All Things Open.&lt;br /&gt;&lt;br /&gt;I &lt;a href="http://www.schabell.org/2018/10/all-things-open-2018-lightning-talk.html" target="_blank"&gt;gave a lightning talk&lt;/a&gt; on how to jump start a career in open source, in just 6 minutes.&lt;br /&gt;&lt;br /&gt;The topic is near and dear to my heart, so as a lightning talk it was fun to promote the full session I gave earlier this Summer in one of the most amazing venues I've ever spoken at.&lt;br /&gt;&lt;br /&gt;The talk includes links to the recording of that venue and the complete story I told. After the talk I &lt;a href="https://www.schabell.org/2018/10/all-things-open-2018-lightning-talk-slides.html" target="_blank"&gt;posted the slides&lt;/a&gt;, but we've been waiting on the video recording of the session and it's arrived!&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;The recording&lt;/h3&gt;I can't tell you how much fun it was in just a few words, but soundly recommend that you put All Things Open on your wish list for 2019. They run a fantastic conference, take good care of their speakers, and the infrastructure is as good as it gets. Below the recording of my talk.&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/LQ2BYca8u48" width="560"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;For completeness, here is the original abstract:&lt;br /&gt;&lt;h3&gt;Lightning Talk - How to Jump Start a Career in Open Source&lt;/h3&gt;&lt;i&gt;It's not wishful thinking. It's not luck. It's not going to happen by itself, so what's the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt; &lt;i&gt;Date: Tuesday, OCT 23&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Time: 12:45 PM, local time&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Room: main stage in Ballroom B on 4th floor of the Raleigh Convention Center.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;All lightning talks will be recorded for future playback on the Opensource.com YouTube channel. Live stream will not be available for this event.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Hope to see you at the 2019 conference!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ijQZTtZjRYk:lrHmc9OCs7A:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ijQZTtZjRYk:lrHmc9OCs7A:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ijQZTtZjRYk:lrHmc9OCs7A:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ijQZTtZjRYk:lrHmc9OCs7A:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ijQZTtZjRYk:lrHmc9OCs7A:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ijQZTtZjRYk:lrHmc9OCs7A:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ijQZTtZjRYk:lrHmc9OCs7A:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ijQZTtZjRYk:lrHmc9OCs7A:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ijQZTtZjRYk:lrHmc9OCs7A:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ijQZTtZjRYk:lrHmc9OCs7A:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ijQZTtZjRYk:lrHmc9OCs7A:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ijQZTtZjRYk" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/w-9zqjjkd58" height="1" width="1" alt=""/&gt;</content><summary>Last October I was in Raleigh, North Carolina speaking at All Things Open. I gave a lightning talk on how to jump start a career in open source, in just 6 minutes. The topic is near and dear to my heart, so as a lightning talk it was fun to promote the full session I gave earlier this Summer in one of the most amazing venues I've ever spoken at. The talk includes links to the recording of that ven...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-12-07T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ijQZTtZjRYk/all-things-open-2018-lightning-talk-video.html</feedburner:origLink></entry><entry><title>Using Apache Kafka in your jBPM Business Application - Demo</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/S3YxGJ-ZvPQ/using-apache-kafka-in-your-jbpm.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-using_apache_kafka_in_your_jbpm_business_application_demo</id><updated>2018-12-07T17:20:33Z</updated><published>2018-12-06T17:53:00Z</published><content type="html">Recently our jBPM community member &lt;a href="https://github.com/prasanthatl"&gt;Prasanth Nair&lt;/a&gt;&amp;nbsp;was kind to contribute the &lt;a href="https://github.com/kiegroup/jbpm-work-items/tree/master/kafka-workitem"&gt;Kafka workitem&lt;/a&gt; to our &lt;a href="https://github.com/kiegroup/jbpm-work-items"&gt;jBPM workitem repository&lt;/a&gt;. The contributed Kafka workitem includes a &lt;a href="https://github.com/kiegroup/jbpm-work-items/blob/master/kafka-workitem/src/main/java/org/jbpm/process/workitem/kafka/KafkaWorkItemHandler.java"&gt;handler&lt;/a&gt; which uses the Kafka producer to send messages to a specified topic.&lt;br /&gt;&lt;br /&gt;In this post we will show you a small demo using this Kafka workitem. As usual this demo is based on the jBPM business applications which you can easily generate on &lt;a href="http://start.jbpm.org/"&gt;start.jbpm.org&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;You can find the source of the demo and detailed descriptions on how to set it up and get it up and running on &lt;a href="https://github.com/business-applications/sample-kafka"&gt;github&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-H7RGk_lXp_Q/XAlhGZoQvlI/AAAAAAAAhmg/VR0uTkrgG7Mie0vguOl9CmZM49y0NYfogCLcBGAs/s1600/Screen%2BShot%2B2018-12-06%2Bat%2B12.33.38%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1125" data-original-width="1600" height="225" src="https://4.bp.blogspot.com/-H7RGk_lXp_Q/XAlhGZoQvlI/AAAAAAAAhmg/VR0uTkrgG7Mie0vguOl9CmZM49y0NYfogCLcBGAs/s320/Screen%2BShot%2B2018-12-06%2Bat%2B12.33.38%2BPM.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The demo app uses a &lt;a href="https://github.com/business-applications/sample-kafka/blob/master/sample-kafka-kjar/src/main/resources/kafkaweather.bpmn2"&gt;simple business&amp;nbsp;process&lt;/a&gt; that retrieves current weather information from &lt;a href="http://openweathermap.org/"&gt;openweathermap.org&lt;/a&gt;&amp;nbsp;and sends it to the Kafka workitem so that this info can be sent to a Kafka topic.&lt;br /&gt;&lt;br /&gt;The business Spring Boot app uses the &lt;a href="https://spring.io/projects/spring-kafka"&gt;Spring-kafka&lt;/a&gt; integration and defines a &lt;a href="https://github.com/business-applications/sample-kafka/blob/master/sample-kafka-service/src/main/java/com/company/service/configurations/KafkaConsumerConfig.java#L18"&gt;Kafka consumer configuration&lt;/a&gt;&amp;nbsp;as well as the &lt;a href="https://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html/websocket.html"&gt;Spring WebSocket &lt;/a&gt;support to setup a &lt;a href="https://github.com/business-applications/sample-kafka/blob/master/sample-kafka-service/src/main/java/com/company/service/configurations/WebSocketConfig.java#L11"&gt;WebSocket config&lt;/a&gt;. Kafka messages that are consumed by our business app are then being broadcasted to a websocket endpoint and picked up by our UI (via sockjs and stomp). This way our UI can dynamically update the weather info display without any page refreshes needed.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://github.com/business-applications/sample-kafka/blob/master/sample-kafka-service/src/main/java/com/company/service/services/KafkaConsumerService.java"&gt;Here&lt;/a&gt; is the definition of the demo business app Kafka consumer. Take a look at its &lt;a href="https://github.com/business-applications/sample-kafka/blob/master/sample-kafka-service/src/main/java/com/company/service/services/KafkaConsumerService.java#L24"&gt;consume method&lt;/a&gt;, which simply receives the Kafka message and sends it to a WebSocket endpoint, and &lt;a href="https://github.com/business-applications/sample-kafka/blob/master/sample-kafka-service/src/main/resources/templates/index.html#L84"&gt;here&lt;/a&gt; is the JavaScript setup which listens to the same WebSocket endpoint and updates the weather chart once new info is received.&lt;br /&gt;&lt;br /&gt;Here is the demo walkthrough video where we explain the demo in detail, show the code, and run the demo.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/gSsw1W1Bih4/0.jpg" src="https://www.youtube.com/embed/gSsw1W1Bih4?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Hope this demo gives you some ideas on how to create your own cool jBPM Business App using Apache Kafka.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Many thanks to Prasanth for his contribution!&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/S3YxGJ-ZvPQ" height="1" width="1" alt=""/&gt;</content><summary>Recently our jBPM community member Prasanth Nair was kind to contribute the Kafka workitem to our jBPM workitem repository. The contributed Kafka workitem includes a handler which uses the Kafka producer to send messages to a specified topic. In this post we will show you a small demo using this Kafka workitem. As usual this demo is based on the jBPM business applications which you can easily gene...</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2018-12-06T17:53:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2018/12/using-apache-kafka-in-your-jbpm.html</feedburner:origLink></entry></feed>
