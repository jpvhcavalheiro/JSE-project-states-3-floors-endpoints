<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Processing CloudEvents with Eclipse Vert.x</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TUNdyBF8YX8/" /><category term="C++" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CloudEvents" scheme="searchisko:content:tags" /><category term="CNCF" scheme="searchisko:content:tags" /><category term="Eclipse Vert.x" scheme="searchisko:content:tags" /><category term="event processing" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="reactive" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><category term="Stream Processing" scheme="searchisko:content:tags" /><category term="vert.x" scheme="searchisko:content:tags" /><author><name>Matthias Wessendorf</name></author><id>searchisko:content:id:jbossorg_blog-processing_cloudevents_with_eclipse_vert_x</id><updated>2018-12-11T13:00:49Z</updated><published>2018-12-11T13:00:49Z</published><content type="html">&lt;p&gt;Our connected world is full of events that are triggered or received by different software services. One of the big issues is that event publishers tend to describe events differently and in ways that are mostly incompatible with each other.&lt;/p&gt; &lt;p&gt;To address this, the &lt;a href="https://github.com/cncf/wg-serverless"&gt;Serverless Working Group&lt;/a&gt; from the &lt;a href="https://www.cncf.io/" rel="nofollow"&gt;Cloud Native Computing Foundation&lt;/a&gt; (CNCF) recently announced version 0.2 of the &lt;a href="https://cloudevents.io/"&gt;CloudEvents&lt;/a&gt; specification. The specification aims to describe event data in a common, standardized way. To some degree, a CloudEvent is an abstract envelope with some specified attributes that describe a concrete event and its data.&lt;/p&gt; &lt;p&gt;Working with CloudEvents is simple. This article shows how to use the powerful JVM toolkit provided by Vert.x to either generate or receive and process CloudEvents.&lt;/p&gt; &lt;p&gt;&lt;span id="more-544667"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;a id="user-content-sdks-for-working-with-cloudevents" class="anchor" href="https://gist.github.com/matzew/beb71c9bc7062b1cf18aa6d080b458ce#sdks-for-working-with-cloudevents"&gt;&lt;/a&gt;SDKs for working with CloudEvents&lt;/h2&gt; &lt;p&gt;In addition to the specification, the CloudEvents team from the Serverless Working Group is working on different SDKs for various platforms, such as &lt;a href="https://github.com/cloudevents/sdk-javascript"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://github.com/cloudevents/sdk-go"&gt;Golang&lt;/a&gt;, &lt;a href="https://github.com/cloudevents/sdk-csharp"&gt;C Sharp&lt;/a&gt;, &lt;a href="https://github.com/cloudevents/sdk-java"&gt;Java&lt;/a&gt;, and &lt;a href="https://github.com/cloudevents/sdk-python"&gt;Python&lt;/a&gt;. This article will give a quick overview of the Java SDK and how it can be used inside an application built with Eclipse Vert.x.&lt;/p&gt; &lt;p&gt;The API is very simple and contains a generic &lt;code&gt;CloudEvent&lt;/code&gt; class as well as a builder to create an instance of a &lt;code&gt;CloudEvent&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;final CloudEvent&amp;#60;MyCustomEvent&amp;#62; cloudEvent = new CloudEventBuilder&amp;#60;MyCustomEvent&amp;#62;() .data(new MyCustomEvent(...)) .type("My.Cloud.Event.Type") .id(UUID.randomUUID().toString();) .source(URI.create("/trigger");) .build();&lt;/pre&gt; &lt;p&gt;Above, we use the &lt;code&gt;CloudEventBuilder&lt;/code&gt; to create a very simple &lt;code&gt;CloudEvent&lt;/code&gt; instance. However, in isolation, the API does not show its strength.&lt;/p&gt; &lt;h2&gt;&lt;a id="user-content-eclipse-vertx" class="anchor" href="https://gist.github.com/matzew/beb71c9bc7062b1cf18aa6d080b458ce#eclipse-vertx"&gt;&lt;/a&gt;Eclipse Vert.x&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/13/eclipse-vertx-first-application/" rel="nofollow"&gt;Eclipse Vert.x&lt;/a&gt; is a toolkit for building reactive applications on the JVM. It is event-driven and nonblocking, which means applications can handle a lot of concurrency using a small number of kernel threads. See the resources below for more info on Vert.x. Fortun&lt;/p&gt; &lt;p&gt;Fortunately, support for Eclipse Vert.x is included in the CloudEvents Java SDK:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.cloudevents&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;http-vertx&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;0.2.0&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;h3&gt;&lt;a id="user-content-sending-a-cloudevent-to-a-remote-service" class="anchor" href="https://gist.github.com/matzew/beb71c9bc7062b1cf18aa6d080b458ce#sending-a-cloudevent-to-a-remote-service"&gt;&lt;/a&gt;Sending a CloudEvent to a remote service&lt;/h3&gt; &lt;p&gt;Now that we have our &lt;code&gt;CloudEvent&lt;/code&gt; object, capturing our event data, we want to send it to a remote cloud service, which will then process it:&lt;/p&gt; &lt;pre&gt;final HttpClientRequest request = vertx.createHttpClient().post(8080, "localhost", "/"); // add a client response handler request.handler(resp -&amp;#62; { // react on the server response }); // write the CloudEvent to the given HTTP Post request object VertxCloudEvents.create().writeToHttpClientRequest(cloudEvent, request); request.end(); &lt;/pre&gt; &lt;p&gt;After creating an HTTP Post request, we set up an async handler to deal with the &lt;em&gt;future&lt;/em&gt; response of the server. Finally, the &lt;code&gt;writeToHttpClientRequest&lt;/code&gt; of our &lt;code&gt;VertxCloudEvents&lt;/code&gt; utility is used to serialize the actual &lt;code&gt;CloudEvent&lt;/code&gt; object to the given &lt;code&gt;HttpClientRequest&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-receiving-cloudevents-with-vertx" class="anchor" href="https://gist.github.com/matzew/beb71c9bc7062b1cf18aa6d080b458ce#receiving-cloudevents-with-vertx"&gt;&lt;/a&gt;Receiving CloudEvents with Vert.x&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;VertxCloudEvents&lt;/code&gt; utility also contains a different function to receive a &lt;code&gt;CloudEvent&lt;/code&gt; inside an Eclipse Vert.x HTTP server application:&lt;/p&gt; &lt;pre&gt;import io.cloudevents.http.reactivex.vertx.VertxCloudEvents; import io.vertx.core.http.HttpHeaders; import io.vertx.reactivex.core.AbstractVerticle; public class CloudEventVerticle extends AbstractVerticle { public void start() { vertx.createHttpServer() .requestHandler(req -&amp;#62; VertxCloudEvents.create().rxReadFromRequest(req) .subscribe((receivedEvent, throwable) -&amp;#62; { if (receivedEvent != null) { // I got a CloudEvent object: System.out.println("The event type: " + receivedEvent.getType()) } })) .rxListen(8080) .subscribe(server -&amp;#62; { System.out.println("Server running!"); }); } }&lt;/pre&gt; &lt;p&gt;Above, we start a simple &lt;code&gt;HTTPServer&lt;/code&gt;, using the &lt;a href="https://vertx.io/docs/vertx-rx/java2/" rel="nofollow"&gt;Vert.x API for RxJava 2&lt;/a&gt;. Inside the reactive &lt;em&gt;request handler,&lt;/em&gt; we invoke the &lt;code&gt;rxReadFromRequest()&lt;/code&gt; method and &lt;em&gt;subscribe&lt;/em&gt; to the CloudEvents it returns for further processing. Now we can work with the &lt;code&gt;CloudEvent&lt;/code&gt; object inside our own server-side framework!&lt;/p&gt; &lt;h2&gt;&lt;a id="user-content-conclusion-and-outlook" class="anchor" href="https://gist.github.com/matzew/beb71c9bc7062b1cf18aa6d080b458ce#conclusion-and-outlook"&gt;&lt;/a&gt;Conclusion and Outlook&lt;/h2&gt; &lt;p&gt;Working with CloudEvents is simple and Vert.x provides a powerful JVM toolkit to either generate or receive and process CloudEvents in our system. CloudEvents are being adopted by more and more tools and frameworks such as &lt;a href="https://github.com/knative/"&gt;Knative&lt;/a&gt;, which uses CloudEvents to exchange data between different components and services in a standardized format.&lt;/p&gt; &lt;p&gt;The CloudEvent specification is in its early stages with its current 0.2 version. However, even in such infancy, it is generating traction and proving an increasingly useful specification to allow interoperability between applications.&lt;/p&gt; &lt;h2&gt;Additonal Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/tag/vert.x/"&gt;Vert.x&lt;/a&gt;: &lt;ul&gt; &lt;li&gt;&lt;em&gt;&lt;a href="https://developers.redhat.com/books/building-reactive-microservices-java/"&gt;Building Reactive Microservices in Java: Asynchronous and Event-Based Application Design&lt;/a&gt;, &lt;/em&gt;a free ebook&lt;/li&gt; &lt;li&gt;&lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/13/eclipse-vertx-first-application/"&gt;Introduction to Vert.x&lt;/a&gt;&lt;/em&gt; article series by &lt;a href="https://developers.redhat.com/blog/author/cescoffier/"&gt;Clement Escoffier&lt;/a&gt; &lt;ul&gt; &lt;li&gt;Part 1—&lt;a href="https://developers.redhat.com/blog/2018/03/13/eclipse-vertx-first-application/"&gt;Introduction to Vert.x &amp;#8211; My First Vert.x Application&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 2—&lt;a href="https://developers.redhat.com/blog/2018/03/22/eclipse-vert-x-application-configuration/"&gt;Eclipse Vert.x Application Configuration&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3—&lt;a href="https://developers.redhat.com/blog/2018/03/29/rest-vert-x/"&gt;Some REST with Vert.x&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 4—&lt;a href="https://developers.redhat.com/blog/2018/04/09/accessing-data-reactive-way/"&gt;Accessing Data, the Reactive Way&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 5—&lt;a href="https://developers.redhat.com/blog/author/cescoffier/"&gt;When Vert.x meets Reactive eXtensions&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/tag/cloudevents/"&gt;CloudEvents&lt;/a&gt;: &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/15/eventflow-event-driven-microservices-on-openshift-part-1/"&gt;EventFlow: Event-driven microservices on Red Hat OpenShift&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#38;linkname=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#38;linkname=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#38;linkname=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#38;linkname=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#38;linkname=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#38;linkname=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#38;linkname=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#38;linkname=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F11%2Fprocessing-cloudevents-vertx%2F&amp;#038;title=Processing%20CloudEvents%20with%20Eclipse%20Vert.x" data-a2a-url="https://developers.redhat.com/blog/2018/12/11/processing-cloudevents-vertx/" data-a2a-title="Processing CloudEvents with Eclipse Vert.x"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/11/processing-cloudevents-vertx/"&gt;Processing CloudEvents with Eclipse Vert.x&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TUNdyBF8YX8" height="1" width="1" alt=""/&gt;</content><summary>Our connected world is full of events that are triggered or received by different software services. One of the big issues is that event publishers tend to describe events differently and in ways that are mostly incompatible with each other. To address this, the Serverless Working Group from the Cloud Native Computing Foundation (CNCF) recently announced version 0.2 of the CloudEvents specificatio...</summary><dc:creator>Matthias Wessendorf</dc:creator><dc:date>2018-12-11T13:00:49Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/11/processing-cloudevents-vertx/</feedburner:origLink></entry><entry><title>Infinispan Spring Boot Starter 2.1.1.Final and 1.0.4.Final are out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xivPfweb8oo/infinispan-spring-boot-211final-and.html" /><category term="9.4.4.Final" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><category term="Spring" scheme="searchisko:content:tags" /><category term="spring-boot" scheme="searchisko:content:tags" /><category term="spring-boot starters" scheme="searchisko:content:tags" /><category term="spring-session" scheme="searchisko:content:tags" /><author><name>Katia Aresti</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_spring_boot_starter_2_1_1_final_and_1_0_4_final_are_out</id><updated>2018-12-11T12:54:35Z</updated><published>2018-12-11T12:43:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Dear Infinispan and Spring Boot users,&lt;br /&gt;&lt;br /&gt;We have just released &lt;a href="https://github.com/infinispan/infinispan-spring-boot" target="_blank"&gt;Infinispan Spring Boot&lt;/a&gt;&amp;nbsp;&lt;b&gt;2.1.1.Final &lt;/b&gt;and&lt;b&gt; 1.0.4.Final&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;1.0.4.Final&lt;/b&gt; is using&amp;nbsp;&lt;b&gt;Spring Boot 1.5.17.RELEASE&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;2.1.1.Final&lt;/b&gt; is using&amp;nbsp;&lt;b&gt;Spring Boot 2.1.1.RELEASE&lt;/b&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Both starters are now using Infinispan's&amp;nbsp;&lt;a href="https://blog.infinispan.org/2018/12/infinispan-944final-and-1000alpha2-out.html" target="_blank"&gt;last stable release: 9.4.4.Final&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;9.4.4.Final provides full support to &lt;b&gt;JDK 11,&lt;/b&gt;&amp;nbsp;Spring 4 &lt;b&gt;&lt;u&gt;and&lt;/u&gt;&lt;/b&gt; 5.&lt;br /&gt;Concerning Spring 5, it includes &lt;a href="https://spring.io/projects/spring-session" target="_blank"&gt;Spring Session 2.1.2.RELEASE&lt;/a&gt; support.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;You can find these releases in the maven central repository.&lt;br /&gt;&lt;br /&gt;Please report any issues in our&amp;nbsp;&lt;a href="https://issues.jboss.org/projects/ISPN"&gt;issue tracker&lt;/a&gt;&amp;nbsp;and join the conversation in our&amp;nbsp;&lt;a href="https://infinispan.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt;&amp;nbsp;to shape up our next release.&lt;br /&gt;&lt;br /&gt;Enjoy,&lt;br /&gt;&lt;br /&gt;The Infinispan Team&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/F5-8JF7ogoY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xivPfweb8oo" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan and Spring Boot users, We have just released Infinispan Spring Boot 2.1.1.Final and 1.0.4.Final. 1.0.4.Final is using Spring Boot 1.5.17.RELEASE 2.1.1.Final is using Spring Boot 2.1.1.RELEASE  Both starters are now using Infinispan's last stable release: 9.4.4.Final. 9.4.4.Final provides full support to JDK 11, Spring 4 and 5. Concerning Spring 5, it includes Spring Session 2.1.2.R...</summary><dc:creator>Katia Aresti</dc:creator><dc:date>2018-12-11T12:43:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/F5-8JF7ogoY/infinispan-spring-boot-211final-and.html</feedburner:origLink></entry><entry><title>Demystifying the Red Hat Decision Manager and Process Automation Manager Remote Client</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lOShwBFMGzY/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss BRMS" scheme="searchisko:content:tags" /><category term="kie" scheme="searchisko:content:tags" /><category term="KIE Server" scheme="searchisko:content:tags" /><category term="KIE Server Client" scheme="searchisko:content:tags" /><category term="Red Hat Decision Manager" scheme="searchisko:content:tags" /><category term="Red Hat Process Automation Manager" scheme="searchisko:content:tags" /><category term="RHPAM" scheme="searchisko:content:tags" /><author><name>Duncan Doyle</name></author><id>searchisko:content:id:jbossorg_blog-demystifying_the_red_hat_decision_manager_and_process_automation_manager_remote_client</id><updated>2018-12-10T21:13:39Z</updated><published>2018-12-10T21:13:39Z</published><content type="html">&lt;p&gt;KIE-Server is the light-weight, cloud-native, rules and process execution runtime of the &lt;a href="https://developers.redhat.com/products/red-hat-decision-manager/overview/"&gt;Red Hat Decision Manager&lt;/a&gt; (RHDM) and &lt;a href="https://developers.redhat.com/products/rhpam/overview/"&gt;Red Hat Process Automation Manager&lt;/a&gt; (RHPAM) platforms. Lately, I&amp;#8217;ve gotten more and more questions on how to use the KIE-Server Client Java API to interact with the KIE-Server execution runtime of &lt;a href="https://developers.redhat.com/products/red-hat-decision-manager/overview/"&gt;RHDM&lt;/a&gt; (formerly called Red Hat JBoss BRMS) and &lt;a href="https://developers.redhat.com/products/rhpam/overview/"&gt;RHPAM&lt;/a&gt; (RHPAM). To answers these questions, and to create a future reference, I decided to write a number of code examples, accompanied by this article.&lt;/p&gt; &lt;p&gt;The KIE-Server Client Java API provides an easy way for Java applications to communicate with the KIE-Server execution engine of RHDM and RHPAM. The API abstracts the application from the underlying REST and/or JMS communication protocol and transport, making integrations with the server easier to build, test, and maintain.&lt;/p&gt; &lt;p&gt;&lt;span id="more-540217"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is the KIE-Server Client?&lt;/h2&gt; &lt;p&gt;The KIE-Server Client is a small, lightweight Java library, providing a pure Java API, that allows Java clients to interact with Red Hat Decision Manager and RHPAM execution servers over a RESTful (or JMS) communication channel. This abstracts the client from the marshaling of the request and response data into the format that the execution server expects (either JSON, JAXB, or XSTREAM), as well as the handling of sending requests and receiving responses over HTTP (or via a JMS Broker when using the JMS API). This greatly simplifies the code of Java clients that want to interact with our platforms.&lt;/p&gt; &lt;h2&gt;The API&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s first look at the API itself. The API is structured around the &lt;code&gt;KieServicesClient&lt;/code&gt;. The &lt;code&gt;KieServicesClient&lt;/code&gt; is one of the main components that can be built from the &lt;code&gt;KieServicesFactory&lt;/code&gt;, and it gives us access to the various runtimes that KIE-Server provides. KIE-Server uses a plug-in based system, and every functionality of the platform is provided through plug-ins.&lt;/p&gt; &lt;p&gt;For each plugin that exposes a remote interface, the client provides a matching client-side service. For example, to execute rules via the KIE-Server rules engine, we use the &lt;code&gt;RuleServicesClient&lt;/code&gt;, Decision Model and Notation (DMN) models are evaluated with the &lt;code&gt;DMNServicesClient&lt;/code&gt;, and interaction with the process engine is done via the &lt;code&gt;ProcessServicesClient&lt;/code&gt;. Other available clients are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;CaseServicesClient&lt;/code&gt; to interact with the Case Management system&lt;/li&gt; &lt;li&gt;&lt;code&gt;UserTaskServicesClient&lt;/code&gt; to interact with the process engine&amp;#8217;s UserTask engine&lt;/li&gt; &lt;li&gt;&lt;code&gt;QueryServicesClient&lt;/code&gt; to execute queries against the server&lt;/li&gt; &lt;li&gt;&lt;code&gt;SolverServicesClient&lt;/code&gt; to integrate with the OptaPlanner capabilities&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;And there are various administration clients.&lt;/p&gt; &lt;p&gt;The code below shows how a specific client, in this case, a &lt;code&gt;ProcessServicesClient&lt;/code&gt;, can be retrieved from the main &lt;code&gt;KieServicesClient&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;KieServicesClient kieServicesClient = KieServicesFactory.newKieServicesClient(kieServicesConfig); ProcessServicesClientprocessClient=kieServicesClient.getServicesClient(ProcessServicesClient.class);&lt;/pre&gt; &lt;p&gt;The various remote client APIs, where possible, are very close to the standard Java APIs that KIE, Drools, Red Hat JBoss Frameworks (formerly Red Hat JBoss jBPM), and OptaPlanner expose. However, there are some differences that users need to be aware of.&lt;/p&gt; &lt;h2&gt;Using the right KIE-Session&lt;/h2&gt; &lt;p&gt;When using Decision Manager/Drools as an embedded library, a &lt;code&gt;KieSession&lt;/code&gt;, the session in which you insert data and executes rule, is retrieved from a &lt;code&gt;KieContainer&lt;/code&gt;.&lt;b&gt; &lt;/b&gt;The &lt;code&gt;KieContainer&lt;/code&gt; API allows you to select the specific &lt;code&gt;KieSession&lt;/code&gt; you want to use. Different &lt;code&gt;KieSession&lt;/code&gt;s can be configured in the &lt;code&gt;kmodule.xml&lt;/code&gt; deployment descriptor of the rules deployment unit (the KJAR). This allows us to define and configure different kinds of sessions, for example, stateless &lt;code&gt;KieSession&lt;/code&gt;s, stateful &lt;code&gt;KieSession&lt;/code&gt;s, or &lt;code&gt;KieSession&lt;/code&gt;s that use a pseudo-clock—whatever our use-case requires.&lt;/p&gt; &lt;p&gt;Selecting the right &lt;code&gt;KieSession&lt;/code&gt; when using the remote KIE-Server Client is done differently, because the API does not expose the &lt;code&gt;KieContainer&lt;/code&gt;. Instead, we need to specify the &amp;#8220;ID&amp;#8221; of the &lt;code&gt;KieSession&lt;/code&gt; to be used in a &lt;code&gt;BatchExecutorCommand&lt;/code&gt;, as shown here:&lt;/p&gt; &lt;pre&gt;BatchExecutionCommand batchExecutionCommand = commandFactory.newBatchExecution(commands, "default-stateless-kiession");&lt;/pre&gt; &lt;p&gt;This will result in a JSON payload that contains a &amp;#8220;lookup&amp;#8221; entry, which tells the KIE-Server which session to use for the given request:&lt;/p&gt; &lt;pre&gt;{ "lookup" : "default-stateless-ksession", "commands" : [ {&lt;/pre&gt; &lt;p&gt;The ID should match the ID of a &lt;code&gt;KieSession&lt;/code&gt; defined in the KJAR&amp;#8217;s &lt;code&gt;kmodule.xml&lt;/code&gt;, as shown here:&lt;/p&gt; &lt;pre&gt;&amp;#60;kmodule xmlns="http://www.drools.org/xsd/kmodule" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&amp;#62; &amp;#60;kbase name="default-kbase" default="true" eventProcessingMode="cloud" equalsBehavior="equality"&amp;#62; &amp;#60;ksession name="&lt;b&gt;default-stateless-ksession&lt;/b&gt;" type="stateless" default="true" clockType="realtime"/&amp;#62; &amp;#60;/kbase&amp;#62; &amp;#60;/kmodule&amp;#62;&lt;/pre&gt; &lt;p&gt;When using the remote client API, it is recommended to use stateless &lt;code&gt;KieSession&lt;/code&gt;s, unless your use-case explicitly requires stateful sessions.&lt;/p&gt; &lt;h2&gt;Marshaling and custom data types&lt;/h2&gt; &lt;p&gt;When using a remote API, data needs to be sent from the client to the server in a format that both parties understand. KIE-Server supports three formats: JSON, JAXB, and XSTREAM. Some of the KIE-Server APIs, for example, the API to start a business process, accept generic datatypes as input, such as a &lt;code&gt;Map&lt;/code&gt;. This &lt;code&gt;Map&lt;/code&gt; is used to send process start variables to the process execution engine.&lt;/p&gt; &lt;p&gt;When our process variables consist of custom defined datatypes, for example, &lt;code&gt;Applicant&lt;/code&gt; or &lt;code&gt;Loan&lt;/code&gt;, we need to register these datatypes with the KIE-Server Client. This allows the Marshaller component to correctly marshal and unmarshal these datatypes when communicating with the remote KIE-Server. Java classes can simply be registered via the &lt;code&gt;KieServicesConfiguration&lt;/code&gt;, as shown here:&lt;/p&gt; &lt;pre&gt;KieServicesConfiguration kieServicesConfig = KieServicesFactory.newRestConfiguration(KIE_SERVER_URL, credentialsProvider); Set&amp;#60;Class&amp;#60;?&amp;#62;&amp;#62; extraClasses = new HashSet&amp;#60;&amp;#62;(); extraClasses.add(Application.class); extraClasses.add(Applicant.class); extraClasses.add(Property.class); kieServicesConfig.addExtraClasses(extraClasses);&lt;/pre&gt; &lt;h2&gt;Examples&lt;/h2&gt; &lt;p&gt;In &lt;a href="https://github.com/jbossdemocentral/kie-server-client-examples"&gt;this&lt;/a&gt; GitHub repository, I&amp;#8217;ve collected three examples of KIE-Server Clients that communicate with remote services on the KIE-Server. The examples show how to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Start a business process.&lt;/li&gt; &lt;li&gt;Execute rules.&lt;/li&gt; &lt;li&gt;Evaluate a DMN model.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Three &lt;code&gt;Main&lt;/code&gt; classes are provided that demonstrate the usage of the API. Comments in the code provide further explanation of the APIs being used.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article provided a brief introduction to the KIE-Server Client Java API, provided some tips and tricks for how to best use the API, and concluded with examples that demonstrate how to start a process, execute rules, and evaluate a DMN model.&lt;/p&gt; &lt;p&gt;Here are related articles that might be of interest:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/19/red-hat-decision-manager-7/"&gt;Getting Started with Red Hat Decision Manager 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/19/try-red-hat-decision-openshift/"&gt;Quickly try Red Hat Decision Manager in your cloud&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/04/quickly-try-red-hat-process-automation-manager-in-your-cloud/"&gt;Quickly try Red Hat Process Automation Manager in your cloud&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/01/spring-boot-enabled-business-process-automation-with-red-hat-process-automation-manager/#more-523727"&gt;Spring Boot-enabled business process automation with Red Hat Process Automation Manager&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img class="alignleft" title="Duncan Doyle" src="https://i0.wp.com/en.gravatar.com/userimage/106146330/2f0c06257ede9b94dfb276ccbdb8cab4.jpg" alt="Duncan Doyle" width="119" height="119" /&gt;&lt;/p&gt; &lt;h3&gt;About the author:&lt;/h3&gt; &lt;p&gt;&lt;a href="http://twitter.com/DuncanDoyle" target="_blank" rel="noopener"&gt;Duncan Doyle&lt;/a&gt; is the Technical Marketing Manager for the Decision Manager and Process Automation Manager platforms at Red Hat. With a background in Red Hat Consulting and Services, Duncan has worked extensively with large Red Hat customers to build advanced, open-source, business-rules and business process management solutions.&lt;/p&gt; &lt;p&gt;He has a strong background in technologies and concepts such as Service Oriented Architecture, Continuous Integration and Delivery, rules engines, and BPM platforms and is a subject matter expert (SME) on multiple JBoss Middleware technologies, including, but not limited to, JBoss EAP, HornetQ, Fuse, DataGrid, BRMS, and BPMSuite. When he’s not working on open-source solutions and technology, he is building Lego with his son and daughter or jamming along some 90’s rock-music on his Fender Stratocaster.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#38;linkname=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#38;linkname=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#38;linkname=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#38;linkname=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#38;linkname=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#38;linkname=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#38;linkname=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#38;linkname=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fdemystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client%2F&amp;#038;title=Demystifying%20the%20Red%20Hat%20Decision%20Manager%20and%20Process%20Automation%20Manager%20Remote%20Client" data-a2a-url="https://developers.redhat.com/blog/2018/12/10/demystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client/" data-a2a-title="Demystifying the Red Hat Decision Manager and Process Automation Manager Remote Client"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/10/demystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client/"&gt;Demystifying the Red Hat Decision Manager and Process Automation Manager Remote Client&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lOShwBFMGzY" height="1" width="1" alt=""/&gt;</content><summary>KIE-Server is the light-weight, cloud-native, rules and process execution runtime of the Red Hat Decision Manager (RHDM) and Red Hat Process Automation Manager (RHPAM) platforms. Lately, I’ve gotten more and more questions on how to use the KIE-Server Client Java API to interact with the KIE-Server execution runtime of RHDM (formerly called Red Hat JBoss BRMS) and RHPAM (RHPAM). To answers these q...</summary><dc:creator>Duncan Doyle</dc:creator><dc:date>2018-12-10T21:13:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/10/demystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client/</feedburner:origLink></entry><entry><title>Red Hat KubeCon Seattle 2018 Events &amp; Demos</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OSXkg08qmLY/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="events" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><author><name>David David</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_kubecon_seattle_2018_events_demos</id><updated>2018-12-10T17:02:18Z</updated><published>2018-12-10T17:02:18Z</published><content type="html">&lt;h2&gt;&lt;b&gt;Visit Red Hat at booth D1&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Stop by the Red Hat booth D1 to explore 1:1 demos and speak with our open source specialists. We&amp;#8217;ll be giving away Red Hat beanies, stickers, Command Line Hero coloring books and more, while supplies last.&lt;/p&gt; &lt;h2&gt;Booth Demos&lt;/h2&gt; &lt;h3&gt;&lt;b&gt;Develop Anywhere: tools for cloud native development &lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Tue Dec 11 10:40 11:00am&lt;br /&gt; &lt;span style="font-weight: 400;"&gt;Tugdual Grall&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;An overview of the tools developers can use to build cloud native applications.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;CodeReady Workspaces: A kube-native IDE&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Thursday Dec 13 1:10pm&lt;br /&gt; &lt;span style="font-weight: 400;"&gt;Tugdual Grall&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;During this presentation you will learn how Workspaces, powered by Eclipse Che, provide a browser based IDE, and developer pods to build and shape  any type of application for Kubernetes and OpenShift.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Sample application candidate: https://github.com/eivantsov/microservice-app-example&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Import a microservices application from a factory&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Get the project running in Eclipse Che Workspaces &lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;b&gt;odo&lt;/b&gt;&lt;b&gt;: OpenShift command line for developers [monospace “odo”]&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Tue Dec 11 4:50pm&lt;br /&gt; &lt;span style="font-weight: 400;"&gt;Steve Speicher &amp;#38; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Tomas Kral &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;During this presentation you will learn how to create multi-container applications and see code changes directly on OpenShift&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;DevStudio: integrated development tools for OpenShift&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Wed Dec 12 10:40am&lt;br /&gt; &lt;span style="font-weight: 400;"&gt;Tugdual Grall&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Developers need a rich environment to develop JavaEE, Spring, Integration/Fuse applications and be able to deploy them easily on their OpenShift cluster.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Using VSCode for Kubernetes&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Wed Dec 12 1:10&lt;br /&gt; &lt;span style="font-weight: 400;"&gt;Mohit Suman&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;During this presentation we will discuss the architecture of  tools based on Language Servers, and open API allowing the development of:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Plugins for VSCode&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;AI/Analytics integrated into all the tools&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;b&gt;Going Serverless with OpenShift and Knative&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Tue Dec 11 1:10pm&lt;br /&gt; &lt;span style="font-weight: 400;"&gt;Paul Morie &lt;/span&gt;&lt;/p&gt; &lt;h2&gt;VS Code Meetup&lt;/h2&gt; &lt;div class="chunk"&gt; &lt;div class="flex flex--row eventDateTime"&gt; &lt;div class="flex-item"&gt; &lt;div class="eventTimeDisplay eventDateTime--hover"&gt;&lt;time class="" datetime="1544583600000"&gt;&lt;span class="eventTimeDisplay-startDate"&gt;Tuesday, December 11, 2018 &lt;span class="eventTimeDisplay-startDate-time"&gt;7:00 PM&lt;/span&gt;&lt;/span&gt;&lt;span class="eventTimeDisplay-endDate"&gt; to &lt;span class="eventTimeDisplay-endDate-partialTime"&gt;9:00 PM&lt;/span&gt;&lt;/span&gt;&lt;/time&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="flex flex--row"&gt; &lt;div class="flex-item"&gt; &lt;div class="chunk"&gt; &lt;address&gt;Microsoft Reactor Westlake&lt;/address&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;style type="text/css"&gt;#meetup_oembed .mu_clearfix:after { visibility: hidden; display: block; font-size: 0; content: " "; clear: both; height: 0; }* html #meetup_oembed .mu_clearfix, *:first-child+html #meetup_oembed .mu_clearfix { zoom: 1; }#meetup_oembed { background:#eee;border:1px solid #ccc;padding:10px;-moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;margin:0; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 12px; }#meetup_oembed h3 { font-weight:normal; margin:0 0 10px; padding:0; line-height:26px; font-family:Georgia,Palatino,serif; font-size:24px }#meetup_oembed p { margin: 0 0 10px; padding:0; line-height:16px; }#meetup_oembed img { border:none; margin:0; padding:0; }#meetup_oembed a, #meetup_oembed a:visited, #meetup_oembed a:link { color: #1B76B3; text-decoration: none; cursor: hand; cursor: pointer; }#meetup_oembed a:hover { color: #1B76B3; text-decoration: underline; }#meetup_oembed a.mu_button { font-size:14px; -moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;border:2px solid #A7241D;color:white!important;text-decoration:none;background-color: #CA3E47; background-image: -moz-linear-gradient(top, #ca3e47, #a8252e); background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0, #a8252e), color-stop(1, #ca3e47));disvplay:inline-block;padding:5px 10px; }#meetup_oembed a.mu_button:hover { color: #fff!important; text-decoration: none; }#meetup_oembed .photo { width:50px; height:50px; overflow:hidden;background:#ccc;float:left;margin:0 5px 0 0;text-align:center;padding:1px; }#meetup_oembed .photo img { height:50px }#meetup_oembed .number { font-size:18px; }#meetup_oembed .thing { text-transform: uppercase; color: #555; }&lt;/style&gt; &lt;div id="meetup_oembed" style="height:302px"&gt; &lt;div style="max-height:262px;overflow:hidden"&gt; &lt;h3&gt;VS Code and Red Hat &amp;#8211; Develop for K8s&lt;/h3&gt; &lt;p style="margin:5px 0;font-size:16px"&gt;Tuesday, Dec 11, 2018, 7:00 PM&lt;/p&gt; &lt;p style="margin: 0 0 5px;"&gt;&lt;span style="font-size:14px"&gt;Microsoft Reactor Westlake&lt;/span&gt;&lt;br /&gt;&lt;span style="font-size:12px;"&gt;320 Westlake Ave N Seattle, WA&lt;/span&gt;&lt;/p&gt; &lt;p&gt; &lt;span style="color:#4F8A10;font-size:16px;"&gt;7 Members Attending&lt;/span&gt; &lt;/p&gt; &lt;div style="margin:5px 0 10px" class="mu_clearfix"&gt; &lt;div class="photo"&gt;&lt;img src="https://secure.meetupstatic.com/photos/member/2/9/f/0/thumb_250150736.jpeg" /&gt;&lt;/div&gt; &lt;div class="photo"&gt;&lt;img src="https://secure.meetupstatic.com/photos/member/5/3/f/e/thumb_233121502.jpeg" /&gt;&lt;/div&gt; &lt;div class="photo"&gt;&lt;img src="https://secure.meetupstatic.com/photos/member/9/6/0/c/thumb_46838412.jpeg" /&gt;&lt;/div&gt; &lt;div class="photo"&gt;&lt;img src="https://secure.meetupstatic.com/photos/member/6/6/b/0/thumb_283046288.jpeg" /&gt;&lt;/div&gt; &lt;div class="photo"&gt;&lt;img src="https://secure.meetupstatic.com/photos/member/d/5/2/c/thumb_131514572.jpeg" /&gt;&lt;/div&gt; &lt;div class="photo"&gt;&lt;img src="https://secure.meetupstatic.com/photos/member/6/c/1/3/thumb_283047667.jpeg" /&gt;&lt;/div&gt; &lt;div class="photo"&gt;&lt;img src="https://secure.meetupstatic.com/photos/member/b/b/e/6/thumb_89028102.jpeg" /&gt;&lt;/div&gt; &lt;/p&gt;&lt;/div&gt; &lt;p style="line-height:16px"&gt;Are you interested in hearing what Red Hat is doing with VS Code, either with Java or with any of the other plugins Red Hat has developed? Are you a Java programmer who uses VS Code? Are you interested in using VS Code for developing apps that will run on OpenShift or Kubernetes?Then you should come to see us next week in Seattle! Red Hat and Micro&amp;#8230;&lt;/p&gt; &lt;/p&gt;&lt;/div&gt; &lt;p style="margin:10px 0 0;"&gt;&lt;a href="https://www.meetup.com/VS-Code-Red-Hat-Developers/events/257041085/" target="_blank" class="mu_button"&gt;&lt;strong&gt;Check out this Meetup &amp;#8594;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#38;linkname=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#38;linkname=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#38;linkname=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#38;linkname=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#38;linkname=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#38;linkname=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#38;linkname=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#38;linkname=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Fred-hat-kubecon-seattle-2018-events-demos%2F&amp;#038;title=Red%20Hat%20KubeCon%20Seattle%202018%20Events%20%26%20Demos" data-a2a-url="https://developers.redhat.com/blog/2018/12/10/red-hat-kubecon-seattle-2018-events-demos/" data-a2a-title="Red Hat KubeCon Seattle 2018 Events &amp;#38; Demos"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/10/red-hat-kubecon-seattle-2018-events-demos/"&gt;Red Hat KubeCon Seattle 2018 Events &amp;#038; Demos&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OSXkg08qmLY" height="1" width="1" alt=""/&gt;</content><summary>Visit Red Hat at booth D1 Stop by the Red Hat booth D1 to explore 1:1 demos and speak with our open source specialists. We’ll be giving away Red Hat beanies, stickers, Command Line Hero coloring books and more, while supplies last. Booth Demos Develop Anywhere: tools for cloud native development Tue Dec 11 10:40 11:00am Tugdual Grall An overview of the tools developers can use to build cloud nativ...</summary><dc:creator>David David</dc:creator><dc:date>2018-12-10T17:02:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/10/red-hat-kubecon-seattle-2018-events-demos/</feedburner:origLink></entry><entry><title>jBPM Business Applications Demo - Process terminal using Spring Shell</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PC_CLcNUPnA/jbpm-business-applications-demo-process.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-jbpm_business_applications_demo_process_terminal_using_spring_shell</id><updated>2018-12-10T15:27:31Z</updated><published>2018-12-10T15:22:00Z</published><content type="html">&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-ekL1Ihu2gmQ/XA5_zTChdMI/AAAAAAAAhn0/hudFqPNnIXkI4wa3Vcmm0h7iKYEUqoR7ACLcBGAs/s1600/Screen%2BShot%2B2018-12-09%2Bat%2B11.49.19%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1162" data-original-width="1600" height="232" src="https://2.bp.blogspot.com/-ekL1Ihu2gmQ/XA5_zTChdMI/AAAAAAAAhn0/hudFqPNnIXkI4wa3Vcmm0h7iKYEUqoR7ACLcBGAs/s320/Screen%2BShot%2B2018-12-09%2Bat%2B11.49.19%2BPM.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;So far our &lt;a href="https://github.com/business-applications"&gt;jBPM Business Applications demos&lt;/a&gt; have involved some sort of web-based UI for interacting with our business processes. Sometimes a web-ui is not needed and working with processes via an interactive terminal is the best way to get this done.&lt;br /&gt;&lt;br /&gt;In this demo we show how to use &lt;a href="https://docs.spring.io/spring-shell/docs/current-SNAPSHOT/reference/htmlsingle/"&gt;Spring Shell&lt;/a&gt; inside your jBPM Business Application created via &lt;a href="http://start.jbpm.org/"&gt;start.jbpm.org&lt;/a&gt;. Here is a quick screenshot of the demo application:&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-fCIC4EuPMro/XA6AGYMaPlI/AAAAAAAAhn8/1zloJ2DkpFwUqDT68E4KRNHyQLxQIgGfwCLcBGAs/s1600/shell-demo.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="943" data-original-width="1600" height="188" src="https://1.bp.blogspot.com/-fCIC4EuPMro/XA6AGYMaPlI/AAAAAAAAhn8/1zloJ2DkpFwUqDT68E4KRNHyQLxQIgGfwCLcBGAs/s320/shell-demo.png" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Demo schreenshot&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;We start our demo app as usual using the already provided launch scripts but once it starts we do not launch our browser and go to localhost:8090 (default) to access it, but instead we are presented with a prompt and can start typing in our commands to interact with our business processes.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Spring Shell provides some very useful commands out of the box, such as "help", "clear", "exit", "history", and "stacktrace". Our demo app defined ontop of that our own custom commands to interact with our business processes.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Commands that we define in our business app demo are:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;deploy&lt;/b&gt; &amp;lt;groupId&amp;gt; &amp;lt;artifactId&amp;gt; &amp;lt;version&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;processdefs&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;processinstances&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;startprocess&lt;/b&gt; &amp;lt;processDefId&amp;gt; &amp;lt;deploymentId&amp;gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Our &lt;b&gt;deploy&lt;/b&gt; command allows us to deploy a kjar module which is available in our local maven repository. The demo app comes with &lt;a href="https://github.com/business-applications/sample-shell/tree/master/sample-shell-secondkjar"&gt;one such module&lt;/a&gt;&amp;nbsp;which you can use to deploy after the application has started with the command:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-1_Zdp8rkpO0/XA6C8CdUHwI/AAAAAAAAhoI/pudOmNWIIEsfCjbzohfZlDskm65S7wPUwCLcBGAs/s1600/Screen%2BShot%2B2018-12-10%2Bat%2B10.14.31%2BAM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="250" data-original-width="986" height="101" src="https://2.bp.blogspot.com/-1_Zdp8rkpO0/XA6C8CdUHwI/AAAAAAAAhoI/pudOmNWIIEsfCjbzohfZlDskm65S7wPUwCLcBGAs/s400/Screen%2BShot%2B2018-12-10%2Bat%2B10.14.31%2BAM.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;The &lt;b&gt;processdefs&lt;/b&gt; command simply shows all currently available process definition (across all deployments):&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-C0k2uMJqNZ0/XA6DPY4M7aI/AAAAAAAAhoQ/h3n2fq1vAB8Pt6mQLDj10yqs7HBl43bXgCLcBGAs/s1600/Screen%2BShot%2B2018-12-10%2Bat%2B10.15.54%2BAM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="348" data-original-width="1600" height="86" src="https://1.bp.blogspot.com/-C0k2uMJqNZ0/XA6DPY4M7aI/AAAAAAAAhoQ/h3n2fq1vAB8Pt6mQLDj10yqs7HBl43bXgCLcBGAs/s400/Screen%2BShot%2B2018-12-10%2Bat%2B10.15.54%2BAM.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The&amp;nbsp;&lt;b&gt;startprocess &lt;/b&gt;command allows you to start a business process. It takes in the process definition id and the deployment unit id (if deployment unit id is not specified, the default one is assumed). So for example to start our "firstTestProcess" business process we can do:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/--kCzFT6NmYQ/XA6DsnjNxhI/AAAAAAAAhoY/Byngy0gBcYUSUhGoDFni2eflOeeBa9v5ACLcBGAs/s1600/Screen%2BShot%2B2018-12-10%2Bat%2B10.17.55%2BAM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="178" data-original-width="1264" height="56" src="https://3.bp.blogspot.com/--kCzFT6NmYQ/XA6DsnjNxhI/AAAAAAAAhoY/Byngy0gBcYUSUhGoDFni2eflOeeBa9v5ACLcBGAs/s400/Screen%2BShot%2B2018-12-10%2Bat%2B10.17.55%2BAM.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Lastly, the &lt;b&gt;processinstances&lt;/b&gt; command shows all process instances that are available, for example:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-fU0mIAiIhDA/XA6EF42w43I/AAAAAAAAhog/wtyF_KhJbg8F8-N25x89mdnXWUUiMdEqwCLcBGAs/s1600/Screen%2BShot%2B2018-12-10%2Bat%2B10.19.35%2BAM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="316" data-original-width="716" height="176" src="https://1.bp.blogspot.com/-fU0mIAiIhDA/XA6EF42w43I/AAAAAAAAhog/wtyF_KhJbg8F8-N25x89mdnXWUUiMdEqwCLcBGAs/s400/Screen%2BShot%2B2018-12-10%2Bat%2B10.19.35%2BAM.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;Finally here is a youtube video where we run the demo and show off all the commands. The video also explains the code and how to create custom commands using Spring Boot and Spring Shell.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/pq3lGAUzlKQ/0.jpg" frameborder="0" height="266" src="https://www.youtube.com/embed/pq3lGAUzlKQ?feature=player_embedded" width="320"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;(This is the first time I tried creating a youtube video intro so &lt;b&gt;please don't laug&lt;/b&gt;h ....too much :) )&lt;br /&gt;&lt;br /&gt;Hope this demo helps you guys get some ideas on how to create cool jBPM business apps.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PC_CLcNUPnA" height="1" width="1" alt=""/&gt;</content><summary>So far our jBPM Business Applications demos have involved some sort of web-based UI for interacting with our business processes. Sometimes a web-ui is not needed and working with processes via an interactive terminal is the best way to get this done. In this demo we show how to use Spring Shell inside your jBPM Business Application created via start.jbpm.org. Here is a quick screenshot of the demo...</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2018-12-10T15:22:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2018/12/jbpm-business-applications-demo-process.html</feedburner:origLink></entry><entry><title>How to install Java 8 an 11 on Red Hat Enterprise Linux 8 Beta</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QOJU2wpk_cU/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Hello World" scheme="searchisko:content:tags" /><category term="how-to" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><author><name>Severin Gehwolf</name></author><id>searchisko:content:id:jbossorg_blog-how_to_install_java_8_an_11_on_red_hat_enterprise_linux_8_beta</id><updated>2018-12-10T12:00:53Z</updated><published>2018-12-10T12:00:53Z</published><content type="html">&lt;p&gt;With Red Hat Enterprise Linux (RHEL) 8 Beta, two major versions of Java will be supported: Java 8 and Java 11. In this article, I’ll refer to Java 8 as JDK (Java Development Kit) 8 since we are focusing on the development aspect of using Java. JDK 8 and JDK 11 refer to Red Hat builds of OpenJDK 8 and OpenJDK 11 respectively. Through this article, you’ll learn how to install and run simple Java applications on RHEL 8 Beta, how to switch between two parallel installed major JDK versions via &lt;code&gt;alternatives&lt;/code&gt; and how to select one of the two JDKs on a per-application basis.&lt;span id="more-545727"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;TL; DR&lt;/h2&gt; &lt;p&gt;To install JDK 8, use:  (If you didn&amp;#8217;t  select &lt;em&gt;Make this user administrator&lt;/em&gt; during install see this article to &lt;a href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/"&gt;enable sudo on RHEL&lt;/a&gt;)&lt;/p&gt; &lt;pre&gt;$ sudo yum install java-1.8.0-openjdk-devel&lt;/pre&gt; &lt;p&gt;Then run Java “Hello World” as follows:&lt;/p&gt; &lt;pre&gt;$ cat &amp;#62; HelloWorld.java &amp;#60;&amp;#60;HELLO public class HelloWorld { public static void main(String[] args) { System.out.println("Hello World!"); } } HELLO $ javac HelloWorld.java &amp;#38;&amp;#38; java HelloWorld Hello World! &lt;/pre&gt; &lt;p&gt;To instal JDK 11, use:&lt;/p&gt; &lt;pre&gt;$ sudo yum install java-11-openjdk-devel &lt;/pre&gt; &lt;p&gt;Then run Java “Hello World” as follows:&lt;/p&gt; &lt;pre&gt;$ cat &amp;#62; HelloWorld.java &amp;#60;&amp;#60;HELLO public class HelloWorld { public static void main(String[] args) {   System.out.println("Hello World!");   } } HELLO $ /usr/lib/jvm/java-11-openjdk/bin/java HelloWorld.java Hello World! &lt;/pre&gt; &lt;p&gt;Yes, with JDK 11 you can directly run Java source files. The compilation step is handled for you.&lt;/p&gt; &lt;h2&gt;Watch the Video&lt;/h2&gt; &lt;p&gt;If you prefer to watch a short 4 minute demo video, here it is:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/0TMbIMb4pOA?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;The Longer Version&amp;#8230;&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s consider we have a freshly commissioned Red Hat Enterprise Linux 8 Beta machine and we&amp;#8217;d like to use it for running Java applications.&lt;/p&gt; &lt;p&gt;&lt;img class="alignnone size-medium wp-image-521117" src="https://developers.redhat.com/blog/wp-content/uploads/2018/09/OpenJDK_logo.svg_-300x85.png" alt="OpenJDK logo" width="300" height="85" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/09/OpenJDK_logo.svg_-300x85.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/09/OpenJDK_logo.svg_-768x217.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/09/OpenJDK_logo.svg_.png 1000w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;h2&gt;Finding available Java packages&lt;/h2&gt; &lt;p&gt;In order to figure out which RPM packages to install, we can ask the packaging system which ones provide the &lt;code&gt;java&lt;/code&gt; binary:&lt;/p&gt; &lt;pre&gt;$ yum provides \*/bin/java &lt;/pre&gt; &lt;p&gt;This command tells us that packages &lt;code&gt;java-1.8.0-openjdk-headless&lt;/code&gt; and &lt;code&gt;java-11-openjdk-headless&lt;/code&gt; both provide the &lt;code&gt;java&lt;/code&gt; binary. For the purpose of this article, we’re interested in the development kits, so we’ll install the -devel sub-packages instead. The -devel packages will pull in -headless packages as a dependency. If you already know that RHEL packages are OpenJDK builds, &lt;code&gt;yum list available&lt;/code&gt; might be useful too:&lt;/p&gt; &lt;pre&gt;$ yum list available \*openjdk\* &lt;/pre&gt; &lt;p&gt;For the purpose of this article, we are going to install JDK 8 and JDK 11 &lt;em&gt;&lt;strong&gt;in parallel&lt;/strong&gt;&lt;/em&gt;, and also install maven:&lt;/p&gt; &lt;pre&gt;$ sudo yum install java-1.8.0-openjdk-devel java-11-openjdk-devel maven &lt;/pre&gt; &lt;h2&gt;Switching Java Versions&lt;/h2&gt; &lt;p&gt;In the previous step, we installed JDK 8 and JDK 11 in parallel. At this point in time, JDK 8 is the main JDK on RHEL 8 Beta. That’s why you get this output when running &lt;code&gt;java -version&lt;/code&gt; on a fresh RHEL 8 Beta install:&lt;/p&gt; &lt;pre&gt;$ java -version openjdk version "1.8.0_181" OpenJDK Runtime Environment (build 1.8.0_181-b13) OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode) &lt;/pre&gt; &lt;p&gt;There are two ways to select the Java version you want:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Switch &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; binaries system wide via alternatives. This approach &lt;strong&gt;requires root privileges&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Select the JDK on a per-application basis by setting JAVA_HOME&lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Selecting Java Versions with Alternatives&lt;/h3&gt; &lt;p&gt;&lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; binaries on RHEL 8 beta are managed by the alternatives system. This means a system administrator can switch the system &lt;code&gt;java&lt;/code&gt; (or &lt;code&gt;javac&lt;/code&gt;) to be something other than the default, JDK 8. The alternatives system uses priorities in order to determine which JDK should be available via &lt;code&gt;/usr/bin/java&lt;/code&gt;. JDK 8 has been given a higher priority on RHEL-8 Beta than JDK 11. But we are getting ahead of ourselves. First, lets see which binaries are managed by alternatives:&lt;/p&gt; &lt;pre&gt;$ alternatives --list &lt;/pre&gt; &lt;p&gt;We see that &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; are managed by alternatives. Next, we are going to switch to JDK 11, using the &lt;code&gt;alternatives --config&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;$ sudo alternatives --config java There are 2 programs which provide 'java'. Selection     Command ----------------------------------------------- *+ 1           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-8.el8.x86_64/jre/bin/java) 2          java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.1.13-4.el8.x86_64/bin/java) Enter to keep the current selection[+], or type selection number: 2 &lt;/pre&gt; &lt;p&gt;This will switch the system &lt;code&gt;java&lt;/code&gt; binary to JDK 11. We do the same for &lt;code&gt;javac&lt;/code&gt; since &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;javac&lt;/code&gt; are independently managed. There is no need to switch anything else as every other JDK binary will switch either with the &lt;code&gt;java&lt;/code&gt; or the &lt;code&gt;javac&lt;/code&gt; binary:&lt;/p&gt; &lt;pre&gt;$ sudo alternatives --config javac There are 2 programs which provide 'javac'. Selection     Command ----------------------------------------------- *+ 1           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-8.el8.x86_64/jre/bin/javac) 2          java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.1.13-4.el8.x86_64/bin/javac) Enter to keep the current selection[+], or type selection number: 2 &lt;/pre&gt; &lt;h3&gt;Switching alternatives non-interactively&lt;/h3&gt; &lt;p&gt;Here is an approach to switch to JDK 11, via alternatives, using non-interactive means, which comes in handy if you need to script it:&lt;/p&gt; &lt;pre&gt;$ JAVA_11=$(alternatives --display java | grep 'family java-11-openjdk' | cut -d' ' -f1) $ sudo alternatives --set java $JAVA_11 &lt;/pre&gt; &lt;p&gt;Similarly, switching to JDK 8 via alternatives by non-interactive means:&lt;/p&gt; &lt;pre&gt;$ JAVA_8=$(alternatives --display java | grep 'family java-1.8.0-openjdk' | cut -d' ' -f1) $ sudo alternatives --set java $JAVA_8 &lt;/pre&gt; &lt;p&gt;A similar approach can be followed for &lt;code&gt;javac&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Selecting Java Versions by Setting JAVA_HOME&lt;/h3&gt; &lt;p&gt;Many applications support using the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable, as a way to specify which JDK should be used to run the application. The examples below demonstrate this usage when running maven. This approach is handy if you don’t have root privileges, but both JDKs are already installed on your system.&lt;/p&gt; &lt;p&gt;Selecting JDK 8:&lt;/p&gt; &lt;pre&gt;$ JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk mvn --version Apache Maven 3.5.4 (Red Hat 3.5.4-5) Maven home: /usr/share/maven Java version: 1.8.0_191, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-9.el8.x86_64/jre Default locale: en_US, platform encoding: UTF-8 OS name: "linux", version: "4.18.0-2.el8.x86_64", arch: "amd64", family: "unix" &lt;/pre&gt; &lt;p&gt;Selecting JDK 11:&lt;/p&gt; &lt;pre&gt;$ JAVA_HOME=/usr/lib/jvm/java-11-openjdk mvn --version Apache Maven 3.5.4 (Red Hat 3.5.4-5) Maven home: /usr/share/maven Java version: 11.0.1, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-11-openjdk-11.0.1.13-6.el8.x86_64 Default locale: en_US, platform encoding: UTF-8 OS name: "linux", version: "4.18.0-2.el8.x86_64", arch: "amd64", family: "unix" &lt;/pre&gt; &lt;p&gt;This feature also comes in handy if you have multiple minor JDK versions installed as &lt;a href="https://developers.redhat.com/blog/2018/11/05/migrating-from-oracle-jdk-to-openjdk-on-red-hat-enterprise-linux-what-you-need-to-know/"&gt;Leo Ufimtsev described in his article for RHEL 7.&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Hello World on Steroids, JDK 11 Style&lt;/h2&gt; &lt;p&gt;With &lt;a href="https://openjdk.java.net/jeps/330"&gt;JEP 330&lt;/a&gt;, part of JDK 11, it’s now possible to run Java code in a script-like fashion. The feature is called “Launch Single-File Source-Code Programs” and allows one to use Java as scripting language. Here is a simple example:&lt;/p&gt; &lt;pre&gt;$ cat &amp;#62; factorial &amp;#60;&amp;#60;FACT #!/usr/lib/jvm/java-11-openjdk/bin/java --source 8 public class Factorial { private static void usage() { System.err.println("factorial &amp;#60;number&amp;#62;"); System.exit(1); } private static long factorial(int num) { if (num &amp;#60;= 1) { return 1; } if (num == 2) { return 2; } return factorial(num - 1) * num; } public static void main(String[] args) { if (args.length != 1) { usage(); } int num = -1; try { num = Integer.parseInt(args[0]); } catch (Exception e) { System.err.println("Error: Argument not a number!"); usage(); } System.out.println(factorial(num)); } } FACT $ chmod +x factorial $ ./factorial 6 720 &lt;/pre&gt; &lt;p&gt;Thank you. I hope you’ve found this article useful.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#38;linkname=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F12%2F10%2Finstall-java-rhel8%2F&amp;#038;title=How%20to%20install%20Java%208%20an%2011%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" data-a2a-url="https://developers.redhat.com/blog/2018/12/10/install-java-rhel8/" data-a2a-title="How to install Java 8 an 11 on Red Hat Enterprise Linux 8 Beta"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/12/10/install-java-rhel8/"&gt;How to install Java 8 an 11 on Red Hat Enterprise Linux 8 Beta&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QOJU2wpk_cU" height="1" width="1" alt=""/&gt;</content><summary>With Red Hat Enterprise Linux (RHEL) 8 Beta, two major versions of Java will be supported: Java 8 and Java 11. In this article, I’ll refer to Java 8 as JDK (Java Development Kit) 8 since we are focusing on the development aspect of using Java. JDK 8 and JDK 11 refer to Red Hat builds of OpenJDK 8 and OpenJDK 11 respectively. Through this article, you’ll learn how to install and run simple Java app...</summary><dc:creator>Severin Gehwolf</dc:creator><dc:date>2018-12-10T12:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/12/10/install-java-rhel8/</feedburner:origLink></entry><entry><title>Infinispan 9.4.4.Final and 10.0.0.Alpha2 out with Spring 5 support!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xpujyXWyW9o/infinispan-944final-and-1000alpha2-out.html" /><category term="10.0" scheme="searchisko:content:tags" /><category term="9.4" scheme="searchisko:content:tags" /><category term="alpha" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Galder Zamarreño</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_9_4_4_final_and_10_0_0_alpha2_out_with_spring_5_support</id><updated>2018-12-10T15:06:01Z</updated><published>2018-12-10T08:05:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;We've just released completed a couple of releases:&lt;br /&gt;&lt;br /&gt;Infinispan 9.4.4.Final (&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12340019"&gt;release notes&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Adds Spring 5 and Spring Boot 2.1 support&lt;/li&gt;&lt;li&gt;Fixes for JDK 11 compatibility.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Improves Cache#size() performance when using shared cache stores.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Infinispan 10.0.0.Alpha2 (&lt;a href="https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310799&amp;amp;version=12339364"&gt;release notes&lt;/a&gt;) contains same fixes as 9.4.4.Final plus&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Removes the CLI cache loader&lt;/li&gt;&lt;li&gt;RemoteCache#getBulk methods.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Don't forget to checkout the Infinispan 10 road map &lt;a href="https://blog.infinispan.org/2018/11/the-road-to-infinispan-10-alpha1.html"&gt;blog post&lt;/a&gt; to find out all that's coming.&lt;br /&gt;&lt;br /&gt;Please report any issues in our &lt;a href="https://issues.jboss.org/browse/ISPN"&gt;issue tracker&lt;/a&gt; and join the conversation in our &lt;a href="https://infinispan.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt; to shape up our next release.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Galder&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/FWylZWP4mos" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xpujyXWyW9o" height="1" width="1" alt=""/&gt;</content><summary>We've just released completed a couple of releases: Infinispan 9.4.4.Final (release notes) Adds Spring 5 and Spring Boot 2.1 support Fixes for JDK 11 compatibility.  Improves Cache#size() performance when using shared cache stores. Infinispan 10.0.0.Alpha2 (release notes) contains same fixes as 9.4.4.Final plus Removes the CLI cache loader RemoteCache#getBulk methods. Don't forget to checkout the ...</summary><dc:creator>Galder Zamarreño</dc:creator><dc:date>2018-12-10T08:05:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/FWylZWP4mos/infinispan-944final-and-1000alpha2-out.html</feedburner:origLink></entry><entry><title>Integration Key to Customer Experience - API Management Details</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7L-KYiOx97M/integration-key-to-customer-experience-api-management-details.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integration_key_to_customer_experience_api_management_details</id><updated>2018-12-10T08:11:41Z</updated><published>2018-12-10T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-h6FO-sdoH4A/W-AjgSgf-aI/AAAAAAAAtPw/JFoyKy0JPbU9hj0jggWQqESQc6Ywr0GaQCPcBGAYYCw/s1600/omnichannel-header.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="454" data-original-width="895" height="162" src="https://2.bp.blogspot.com/-h6FO-sdoH4A/W-AjgSgf-aI/AAAAAAAAtPw/JFoyKy0JPbU9hj0jggWQqESQc6Ywr0GaQCPcBGAYYCw/s320/omnichannel-header.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 4 - API gateway details&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In &lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-external-application-details.html" target="_blank"&gt;my previous article from this series&lt;/a&gt; we started diving into the details that determine how your integration becomes the key to transforming your customer experience.&lt;br /&gt;&lt;br /&gt;It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it's time to cover various blueprint details.&lt;br /&gt;&lt;br /&gt;This article takes you deeper in to specific elements (&lt;i&gt;API management and reverse proxy)&lt;/i&gt;&amp;nbsp;from the generic architectural overview.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Architectural details&lt;/h3&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;a href="https://2.bp.blogspot.com/-4S4pzHvZI0M/XApmRkMVyXI/AAAAAAAAtWg/RXfKAMzLN-8kDreVRnDygJ0cs4Z2rb6mACLcBGAs/s1600/Screenshot%2B2018-12-07%2Bat%2B13.23.05.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="86" data-original-width="914" height="30" src="https://2.bp.blogspot.com/-4S4pzHvZI0M/XApmRkMVyXI/AAAAAAAAtWg/RXfKAMzLN-8kDreVRnDygJ0cs4Z2rb6mACLcBGAs/s320/Screenshot%2B2018-12-07%2Bat%2B13.23.05.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;As mentioned before, the architectural details covered here are base on real customer integration solutions using open source technologies. The elements presented here are then the &lt;i&gt;generic common architectural elements&lt;/i&gt;&amp;nbsp;that I've identified and collected in a generic architectural blueprint. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented, but it's expected that they'll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colours that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Now let's take a look at the details in this architecture and outline the elements uncovered in my research.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;API management&lt;/h3&gt;&lt;div&gt;When looking at gateways in to an organization, it's split between managing your API access and hiding the actual landscape behind accessing services in your organization. The first element identified was a management platform for handling API gateway activities.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-JUqqpSk5Z-s/XAp5WlmSCVI/AAAAAAAAtWs/jjl0POm9epchFLGAy08X1kUjTLrwrYZhgCLcBGAs/s1600/Screenshot%2B2018-12-07%2Bat%2B14.44.05.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="526" data-original-width="794" height="211" src="https://2.bp.blogspot.com/-JUqqpSk5Z-s/XAp5WlmSCVI/AAAAAAAAtWs/jjl0POm9epchFLGAy08X1kUjTLrwrYZhgCLcBGAs/s320/Screenshot%2B2018-12-07%2Bat%2B14.44.05.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;i&gt;API management &lt;/i&gt;refers to how access is provided to an organizations services. It's the critical path for access internally to services as well as externally.&lt;br /&gt;&lt;br /&gt;Researching customer portfolio solutions revealed that it's providing access to service interfaces, applications, and other integration microservices. It's providing scalability, reliability, and interface usage metrics that customer evaluate during operations monitoring.&lt;br /&gt;&lt;br /&gt;In the generic architecture blueprint it's managing interfaces from:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;frontend microservices (providing access to internal integration microservices)&lt;/li&gt;&lt;li&gt;process facade microservices (providing access to automated integration processes)&lt;/li&gt;&lt;li&gt;other applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt;&lt;/ul&gt;Part of the process of eventual access from external parties to your internal services through interfaces involves hiding the specific networking details. To do this we'll examine &lt;i&gt;reverse proxies &lt;/i&gt;details.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Reverse proxies&lt;/h3&gt;This covers various solutions found in research, but all are delivering the same functionality.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-xDE9ELWv7Bs/XAp5YYcjZiI/AAAAAAAAtWw/xR0dlME9crUvaWEvfixVJK1ymOufm9tXQCLcBGAs/s1600/Screenshot%2B2018-12-07%2Bat%2B14.44.14.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="omnichannel customer experience" border="0" data-original-height="530" data-original-width="792" height="214" src="https://4.bp.blogspot.com/-xDE9ELWv7Bs/XAp5YYcjZiI/AAAAAAAAtWw/xR0dlME9crUvaWEvfixVJK1ymOufm9tXQCLcBGAs/s320/Screenshot%2B2018-12-07%2Bat%2B14.44.14.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;The basic security is achieved through these proxies, because they are acting on requests from third parties. By retrieving requested resources for their clients, all external parties are prevented from having actual access to internal networks.&lt;br /&gt;&lt;br /&gt;Interactions on behalf of their clients provides them access to the following microservices:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;frontend microservices (providing access to internal integration microservices)&lt;/li&gt;&lt;li&gt;process facade microservices (providing access to automated integration processes)&lt;/li&gt;&lt;li&gt;other applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;These details are not all knowing, but should give you the guidance you'd need to get started in your own architectural situations.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div&gt;This overview covers the API and proxy elements that make up our architecture blueprint for omnichannel customer experience use case.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-architectural-elements.html" target="_blank"&gt;Generic common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-external-application-details.html" target="_blank"&gt;External application details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.schabell.org/2018/12/integration-key-to-customer-experience-api-management-details.html" target="_blank"&gt;API management details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Details of specific elements (container platform, storage services)&lt;/li&gt;&lt;li&gt;Application integration details&lt;/li&gt;&lt;li&gt;Dissecting several specific application integration architectures&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at the details of&amp;nbsp;specific elements in an architecture for omnichannel customer experience.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hXuAj8PX2dE:MuN9rsJCOXM:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hXuAj8PX2dE:MuN9rsJCOXM:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hXuAj8PX2dE:MuN9rsJCOXM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hXuAj8PX2dE:MuN9rsJCOXM:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hXuAj8PX2dE:MuN9rsJCOXM:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/hXuAj8PX2dE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7L-KYiOx97M" height="1" width="1" alt=""/&gt;</content><summary>Part 4 - API gateway detailsIn my previous article from this series we started diving into the details that determine how your integration becomes the key to transforming your customer experience. It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it's time to cove...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-12-10T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/hXuAj8PX2dE/integration-key-to-customer-experience-api-management-details.html</feedburner:origLink></entry><entry><title>Starting your jBPM Business Application as a Service</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YspDjTE9zhc/starting-your-jbpm-business-application.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-starting_your_jbpm_business_application_as_a_service</id><updated>2018-12-10T03:41:12Z</updated><published>2018-12-10T03:26:00Z</published><content type="html">&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;In addition to starting your jBPM Business Application generated via &lt;a href="http://start.jbpm.org/"&gt;start.jbpm.org&lt;/a&gt; using the provided launch scripts, for example:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;&lt;code style="background-color: #f9f2f4; border-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 12.6px; padding: 2px 4px; white-space: nowrap;"&gt;./launch.sh clean install&lt;/code&gt;&lt;span style="font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;for unix or&amp;nbsp;&lt;/span&gt;&lt;code style="background-color: #f9f2f4; border-radius: 4px; box-sizing: border-box; color: #c7254e; font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; font-size: 12.6px; padding: 2px 4px; white-space: nowrap;"&gt;launch.bat clean install&lt;/code&gt;&lt;span style="font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;for windows, you can also start and manage your business application as a service. This provides you with extra control of your app especially in production environments.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;&lt;span style="font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;Weather you are on Unix based system, Windows, or OSX the first step is to configure the business application to generate a fully executable jar. To do this locate your &lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="background-color: #f9f2f4; font-size: 12.6px; white-space: nowrap;"&gt;service&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;module of your business app and modify its&lt;/span&gt;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&amp;nbsp;pom.xml&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;to configure the&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;spring-boot-maven-plugin&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&amp;nbsp;as follows:&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-CciPQMszsEE/XA3V52StSNI/AAAAAAAAhnc/2U2FVlypTBw7y73PUksMQB-Km3H2pi25QCLcBGAs/s1600/Screen%2BShot%2B2018-12-09%2Bat%2B9.15.49%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="376" data-original-width="850" height="141" src="https://3.bp.blogspot.com/-CciPQMszsEE/XA3V52StSNI/AAAAAAAAhnc/2U2FVlypTBw7y73PUksMQB-Km3H2pi25QCLcBGAs/s320/Screen%2BShot%2B2018-12-09%2Bat%2B9.15.49%2BPM.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;With this configuration building your business app will produce a fully executable jar.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Now let's see how we can start the business app as a service under different operating systems.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;b&gt;1. Unix/Linux Service&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Here we have two options, using&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;init.d&amp;nbsp;&lt;/span&gt;or&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;systemd&lt;/span&gt;&amp;nbsp;.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;a) To install our business app as an init.d service we need to create symlink to our executable jar, for example (using the default setup on start.jbpm.org):&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;sudo ln -s ~/business-application/business-application-service/target/&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.jar&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;/etc/init.d/&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.jar&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;after this you can start your business app with for example:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;service&amp;nbsp;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.jar start&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;b) To install our business app as a systemd service we need to create a script called&amp;nbsp;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.service&lt;/span&gt;&amp;nbsp;in the&amp;nbsp;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;on-service-1.0.SNAPS&amp;nbsp;&lt;/span&gt;directory (again we assume the default business app setup, the actual name has to reflect the real app name you have created during app creation on start.jbpm.org).&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;The script could look as follows:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;[Unit]&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;Description=&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;After=syslog.target&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;[Service]&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;User=&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;ExecStart=&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;~/business-application/business-application-service/target/&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.jar&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;SuccessExitStatus=143&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;[Install]&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;WantedBy=multi-user.target&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;Don't forget to change the description, user and execstart parameters to match your installation.&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;Now we can tell systemd to start our business app on system boot with for example:&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;systemctl enable&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.service&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;b&gt;2.&amp;nbsp;Windows Service&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;You can start your business application as a Windows service using&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;winsw&lt;/span&gt;&amp;nbsp;command. For details on how to do this please read detailed instructions on&amp;nbsp;&lt;a href="https://github.com/snicoll/spring-boot-daemon"&gt;https://github.com/snicoll/spring-boot-daemon&lt;/a&gt;.&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;b&gt;3.&amp;nbsp;OSX Service&lt;/b&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;If you are on OSX, you can use the&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;launchctl&lt;/span&gt;&amp;nbsp;command. To get started first we need to create our launch configuration under&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;~/Library/LaunchAgents&lt;/span&gt;&amp;nbsp;directory. So let's create a launch config file called&amp;nbsp;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;business-application-service-1.0.SNAPSHOT.plist&amp;nbsp;&lt;/span&gt;which can look as follows (again, assuming the default generation settings):&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-9QhdIkzjEyA/XA3bsJJCBlI/AAAAAAAAhno/Lz-Dlx6hK1suOc_CYGaaI7mxO9i577i7ACLcBGAs/s1600/Screen%2BShot%2B2018-12-09%2Bat%2B9.16.40%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="306" data-original-width="1600" height="121" src="https://4.bp.blogspot.com/-9QhdIkzjEyA/XA3bsJJCBlI/AAAAAAAAhno/Lz-Dlx6hK1suOc_CYGaaI7mxO9i577i7ACLcBGAs/s640/Screen%2BShot%2B2018-12-09%2Bat%2B9.16.40%2BPM.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;With the launch config created log out with your current user and log back in. Your business application has been started and you can right away access it under &lt;a href="localhost:8090"&gt;locahost:8090 &lt;/a&gt;in your browser.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;You can manage your business app service at this point using the&amp;nbsp;&lt;span style="background-color: #f9f2f4; color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace; font-size: 12.6px; white-space: nowrap;"&gt;launchctl&lt;/span&gt;&amp;nbsp;command. For example to stop our business app service we would run:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;launchctl stop business-application-service-1.0-SNAPSHOT&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="color: #c7254e; font-family: &amp;quot;menlo&amp;quot; , &amp;quot;monaco&amp;quot; , &amp;quot;consolas&amp;quot; , &amp;quot;courier new&amp;quot; , monospace;"&gt;&lt;span style="font-size: 12.6px; white-space: nowrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;and to stop our business application from being started automatically on system startup/login we can simply remove our launch configuration .plist file from ~/Library/LaunchAgents directory.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Hope this information is useful to some of you guys when choosing options on how to launch/deploy/manage your jBPM Business Applications.&lt;/div&gt;&lt;span style="color: #333333; font-family: &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , &amp;quot;freesans&amp;quot; , &amp;quot;clean&amp;quot; , sans-serif;"&gt;&lt;span style="background-color: white;"&gt;&lt;span style="font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YspDjTE9zhc" height="1" width="1" alt=""/&gt;</content><summary>In addition to starting your jBPM Business Application generated via start.jbpm.org using the provided launch scripts, for example: ./launch.sh clean install for unix or launch.bat clean install for windows, you can also start and manage your business application as a service. This provides you with extra control of your app especially in production environments.  Weather you are on Unix based sys...</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2018-12-10T03:26:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2018/12/starting-your-jbpm-business-application.html</feedburner:origLink></entry><entry><title>Camel K on Knative: Agile Integration becoming Serverless</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_-oNfz_DOhM/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_nicolaferraro" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Nicola Ferraro</name></author><id>searchisko:content:id:jbossorg_blog-camel_k_on_knative_agile_integration_becoming_serverless</id><updated>2018-12-10T11:30:00Z</updated><published>2018-12-09T23:00:00Z</published><content type="html">&lt;p&gt;Knative is an open source project for adding serverless building blocks on Kubernetes and it’s constantly gaining traction among developers. In Apache Camel K, we’ve been working hard to leverage all the new possibilities that it provides and this article will show the results we’ve achieved so far.&lt;/p&gt; &lt;p&gt;If you’re not familiar with Camel K, you can &lt;a href="/2018/10/15/introducing-camel-k/"&gt;read the introductory blog post&lt;/a&gt;. Camel K provides a lot of new features when running on &lt;a href="https://github.com/knative/"&gt;Knative&lt;/a&gt;, but it also runs on plain &lt;strong&gt;“vanilla” Kubernetes and OpenShift&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Let’s start with the demo, then you can read the rest of the article to understand better what we’re doing.&lt;/p&gt; &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/btf_e2GniXM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""&gt;&lt;/iframe&gt; &lt;h2 id="so-what-is-knative-and-what-is-not"&gt;So, what is Knative? (and what is not)&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;Knative is not a complete serverless platform. Nor it’s going to become one.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Knative provides a collection of Kubernetes “Custom Resource Definitions” (CRD) together with related controllers that make it easier to build and deploy certain kind of applications&lt;br /&gt; on Kubernetes.&lt;/p&gt; &lt;p&gt;Knative building blocks can be roughly divided into &lt;strong&gt;3 major areas&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://github.com/knative/build"&gt;&lt;strong&gt;Knative Build area&lt;/strong&gt;&lt;/a&gt; provides custom resources for &lt;strong&gt;building applications from source code&lt;/strong&gt; and producing container images.&lt;/p&gt; &lt;p&gt;The CRDs provided in &lt;a href="https://github.com/knative/serving"&gt;&lt;strong&gt;Knative Serving area&lt;/strong&gt;&lt;/a&gt; allow to define services that that &lt;strong&gt;scale automatically&lt;/strong&gt; based on the load. Services can expose generic HTTP endpoints (such as REST): they are not necessarily “functions” (as in FaaS). These services can &lt;strong&gt;scale up&lt;/strong&gt; when the load increases, but also &lt;strong&gt;scale down to zero&lt;/strong&gt; when the load is absent for a certain amount of time. Services that are scaled down to zero don’t consume physical resources and they are brought up again as soon as they need to serve a new request.&lt;/p&gt; &lt;p&gt;The last part of Knative I’m going to describe (and the most important one for our purposes) is the &lt;a href="https://github.com/knative/eventing"&gt;&lt;strong&gt;Knative Eventing area&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="the-eventing-model"&gt;The Eventing Model&lt;/h2&gt; &lt;p&gt;Knative Eventing provides a set of building blocks (CRD) for developing event-based applications.&lt;/p&gt; &lt;p&gt;The main block is the &lt;strong&gt;Channel&lt;/strong&gt;. A channel is the abstraction of a publish-subscribe resource: you can push data into the channel, other services can subscribe to it to receive your data. The channel also decouples producers and consumers, so that producers can always push data into them and consumers can do processing when they are available.&lt;/p&gt; &lt;p&gt;Channels can be backed by different implementations. You can use a “in-memory” implementation, but also a complex one: currently &lt;strong&gt;Kafka&lt;/strong&gt;, &lt;strong&gt;GCP PubSub&lt;/strong&gt; or &lt;strong&gt;Nats&lt;/strong&gt;. Those are referred as &lt;strong&gt;provisioners&lt;/strong&gt; in the Knative area.&lt;/p&gt; &lt;p&gt;You may ask now: why don’t we just use Kafka or Nats directly, &lt;strong&gt;what’s the value added by Knative?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Just look at this schema.&lt;/p&gt; &lt;p style="text-align: center"&gt; &lt;img src="/images/post-knative-channel-model.png" alt="Knative Eventing Model" /&gt; &lt;caption align="bottom"&gt;&lt;i&gt;The Knative Eventing Model&lt;/i&gt;&lt;/caption&gt; &lt;/p&gt; &lt;p&gt;You can notice that the relationship between the channel and the service is somewhat &lt;strong&gt;reversed&lt;/strong&gt; respect to a classical scenario.&lt;/p&gt; &lt;p&gt;Normally, you define a service so that when it starts it connects to a messaging broker and start &lt;strong&gt;pulling&lt;/strong&gt; data from within that connection. In &lt;strong&gt;Knative eventing&lt;/strong&gt;, you subscribe to a channel (using a specific &lt;code class="highlighter-rouge"&gt;Subscription&lt;/code&gt; CRD), then it’s the channel that &lt;strong&gt;pushes&lt;/strong&gt; events towards your service.&lt;/p&gt; &lt;p&gt;The nice thing of all this, is that your service just receives messages through &lt;a href="https://github.com/cloudevents/spec"&gt;incoming Cloudevents&lt;/a&gt;, &lt;strong&gt;without&lt;/strong&gt; having to &lt;strong&gt;actively connect&lt;/strong&gt; to the broker. Your service &lt;strong&gt;becomes passive&lt;/strong&gt;. And since Knative provides other building blocks for autoscaling, your &lt;strong&gt;service scales up and down with the number of events in the channel&lt;/strong&gt; to which it’s subscribed. &lt;strong&gt;Scaling to zero is included&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Another important building block in the Knative Eventing space is the concept of &lt;strong&gt;EventSource&lt;/strong&gt;. A event source is a resource with the role of pushing data into a &lt;em&gt;Channel&lt;/em&gt;. E.g. you can use a GithubSource to foward GitHub generated webhook events into a channel.&lt;/p&gt; &lt;p&gt;Current plan in Knative is to start adding as many &lt;em&gt;EventSources&lt;/em&gt; as possible and this is one of the places where Camel and Camel K can do the difference. Camel is already able to connect to &lt;strong&gt;250+ different systems&lt;/strong&gt;. And Camel is also famous for the variety of &lt;strong&gt;enterprise integration patterns (EIP)&lt;/strong&gt; it implements: EIPs are really important in scenarios enabled by Knative Eventing.&lt;/p&gt; &lt;h2 id="how-camel-k-works"&gt;How Camel K works&lt;/h2&gt; &lt;p&gt;I’ve already described some of the internals of Camel K in the &lt;a href="/2018/10/15/introducing-camel-k/"&gt;introductory blog post&lt;/a&gt; and there will be more blog posts from the Camel K developers in the next days (so, stay tuned!).&lt;/p&gt; &lt;p&gt;The basic idea behind Camel K is explained in the following diagram.&lt;/p&gt; &lt;p style="text-align: center"&gt; &lt;img src="/images/post-camel-k-operator.png" alt="Camel K CRD and Operator" /&gt; &lt;caption align="bottom"&gt;&lt;i&gt;Camel K CRD and Operator&lt;/i&gt;&lt;/caption&gt; &lt;/p&gt; &lt;p&gt;Camel K users write their integration code (the Camel DSL) in a script file, using &lt;strong&gt;Groovy, Kotlin&lt;/strong&gt;, Java or even JavaScript or XML, and run it directly in the cloud platform.&lt;/p&gt; &lt;p&gt;What happens under the hood is that the script is &lt;strong&gt;wrapped into a “Integration” Custom Resource&lt;/strong&gt; and added to a Kubernetes namespace. The &lt;strong&gt;Camel K Operator&lt;/strong&gt; (based on &lt;a href="https://github.com/operator-framework/operator-sdk"&gt;operator SDK&lt;/a&gt;) will then detect the new Integration and &lt;strong&gt;materialize&lt;/strong&gt; it into running containers. Normally Camel K materializes an Integration into a Kubernetes Deployment, but when running on Knative, it uses &lt;strong&gt;auto-scaling services&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;What is really cool about Camel K is that it’s able to &lt;strong&gt;materialize and startup integrations in few seconds&lt;/strong&gt;. This helps a lot during the development phase, because you have immediate feedback on the code you’re writing. The &lt;a href="https://www.youtube.com/embed/9Y5JfYiiBwM"&gt;video&lt;/a&gt; accompanying the first blog post emphasizes this feature.&lt;/p&gt; &lt;h2 id="camel-k-and-knative"&gt;Camel K and Knative&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;Camel K fully supports Knative&lt;/strong&gt; since version v0.1.0. I often tend to remind (so you don’t forget it) that Camel K can also run on plain (= without Knative) OpenShift and “vanilla” Kubernetes, but without “serverless features”.&lt;/p&gt; &lt;p&gt;An important thing of the Knative model is that, since Knative is not a serverless platform, but a set of building blocks, you can run on top of Knative even &lt;strong&gt;multiple serverless platforms&lt;/strong&gt;. Knative does not only provide the building blocks for creating auto-scaling services, but also the building blocks for those platforms to &lt;strong&gt;communicate with each other&lt;/strong&gt; (eventing).&lt;/p&gt; &lt;p&gt;Camel K, thus, is not intended to run as &lt;em&gt;exclusive&lt;/em&gt; serverless platform on top of Knative, it’s rather a &lt;strong&gt;serverless integration layer&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;You are not expected to build generic functions with Camel, you can just use your FaaS platform to do it (provided that it works on top of Knative). But there are at least &lt;strong&gt;three places&lt;/strong&gt; where using &lt;strong&gt;Camel K is the best choice&lt;/strong&gt; you can do.&lt;/p&gt; &lt;h3 id="1-camel-k-for-creating-event-sources"&gt;1. Camel K for creating Event Sources&lt;/h3&gt; &lt;p&gt;Camel can easily push data into Knative channels, acting as event source.&lt;/p&gt; &lt;p&gt;We’ve added a new component in Camel K named “knative”, that allows publishing and subscribing to knative channels. You can use a Knative endpoint at the end of any route to create a event source. And you can use any combination of the 250+ Camel components as starting point.&lt;/p&gt; &lt;p&gt;For example, in the demo you’re going to see the following route:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'telegram:bots/&amp;lt;put-here-your-botfather-authorization&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;convertBodyTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:channel/messages'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;You can run it by simply executing &lt;code class="highlighter-rouge"&gt;kamel run telegram-feed.groovy&lt;/code&gt;. As already mentioned, &lt;code class="highlighter-rouge"&gt;kamel&lt;/code&gt; is used to simply wrap the code in a Kubernetes custom resource, while the materialization work is always accomplished inside Kubernetes by the &lt;strong&gt;Camel K Operator&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;The simple script above generates a “event source”: an integration that forwards all messages sent to a specific bot on telegram to the “messages” Knative channel.&lt;/p&gt; &lt;h3 id="2-camel-k-for-enterprise-integration-patterns-eip"&gt;2. Camel K for Enterprise Integration Patterns (EIP)&lt;/h3&gt; &lt;p&gt;Camel K can also be used within Knative for its powerful enterprise integration patterns. You will see in the demo the following integration:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:channel/messages'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:channel/words'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It is an example of one of the simplest EIP available in Camel, the &lt;a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Sequencer.html"&gt;&lt;strong&gt;splitter EIP&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You run this integration as usual: &lt;code class="highlighter-rouge"&gt;kamel run splitter.groovy&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In Camel you have tons of EIP that you can use out-of-the-box, even within Knative: content-based router, dynamic router, message filter, message transformation, recipient list… and many others.&lt;/p&gt; &lt;h3 id="3-camel-k-for-defining-integration-functions"&gt;3. Camel K for defining Integration Functions&lt;/h3&gt; &lt;p&gt;Many times you need to notify an external system that an event occurred in the serverless space. In these cases, it’s likely that you’ll write an integration function that gets executed when a specific event is received from a channel.&lt;/p&gt; &lt;p&gt;In the demo, you’ll se something like:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:channel/words'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'slack:#camel-k-tests'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This integration snippet is simply forwarding text messages to a Slack channel, but it could be also be doing transformations or enriching content with external data.&lt;/p&gt; &lt;h2 id="future-work"&gt;Future Work&lt;/h2&gt; &lt;p&gt;Camel K runs really well on Knative, but we want to provide a even better experience in the next months.&lt;/p&gt; &lt;p&gt;The value that Camel K adds to Knative is a easy way for people to write EventSources, EIP and Integration Functions. We need to enable people to just do that, but in a way that fits more closely the ideas that are being developed within the Knative space.&lt;/p&gt; &lt;p&gt;The roadmaps of Camel K and Knative are closely related.&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/apache/camel-k"&gt;Apache Camel K&lt;/a&gt; is already here. Grab it while it’s hot!&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_-oNfz_DOhM" height="1" width="1" alt=""/&gt;</content><summary>Knative is an open source project for adding serverless building blocks on Kubernetes and it’s constantly gaining traction among developers. In Apache Camel K, we’ve been working hard to leverage all the new possibilities that it provides and this article will show the results we’ve achieved so far. If you’re not familiar with Camel K, you can read the introductory blog post. Camel K provides a lo...</summary><dc:creator>Nicola Ferraro</dc:creator><dc:date>2018-12-09T23:00:00Z</dc:date><feedburner:origLink>https://www.nicolaferraro.me/2018/12/10/camel-k-on-knative/</feedburner:origLink></entry></feed>
