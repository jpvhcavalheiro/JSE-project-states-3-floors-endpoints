package io.altar.business;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import javax.inject.Inject;
import javax.transaction.Transactional;

import io.altar.models.*;
import io.altar.repository.*;
import io.altar.DTOs.ShelfDTO;
import io.altar.business.ShelfBusiness;

public class ShelfBusiness {
	@Inject
	ProductRepository productRepository1;
	@Inject
	ShelfRepository shelfRepository1;

	@Transactional
	public void provisoryAddNewShelf(Shelf shelfToAdd) {
		shelfRepository1.createEntity(shelfToAdd);
	}

	@Transactional
	public void provisoryChangeShelf(Shelf shelfToChange) {
		shelfRepository1.changeEntity(shelfToChange);
	}

	@Transactional
	public void provisoryRemoveShelf(Shelf shelfToRemove) {
		shelfRepository1.deleteEntity(shelfToRemove);
	}

	@Transactional
	public ShelfDTO addNewShelfToShelfRepository(Shelf shelfToAdd) {
		Shelf newShelf=shelfRepository1.createEntity(shelfToAdd);
		if (newShelf.getProductInShelf() != null) {
			productRepository1.findById(newShelf.getProductInShelf().getId()).getShelvesList().add(shelfToAdd);
			productRepository1.changeEntity(shelfToAdd.getProductInShelf());
		}
		return ShelfDTO.turnShelfToShelfDTO(newShelf);
	}

	public ArrayList<ShelfDTO> getAllShelves() {
		List<ShelfDTO> shelfRepository1DTO = new ArrayList<ShelfDTO>();
		for (Shelf item : shelfRepository1.getAll()) {
			shelfRepository1DTO.add(ShelfDTO.turnShelfToShelfDTO(item));
		}
		return (ArrayList<ShelfDTO>) shelfRepository1DTO;
	}

	public ShelfDTO getAShelf(long shelfIdToSearch) {
		return ShelfDTO.turnShelfToShelfDTO(shelfRepository1.findById(shelfIdToSearch));
	}

	@Transactional
	public ShelfDTO changeShelf(Shelf shelfToEdit) {
		Shelf oldShelf = shelfRepository1.findById(shelfToEdit.getId());
		if (oldShelf.getProductInShelf() != null) {
			Product oldProduct = productRepository1.findById(oldShelf.getProductInShelf().getId());
			oldProduct.getShelvesList().remove(oldShelf);
			productRepository1.changeEntity(oldProduct);
		}
		if (shelfToEdit.getProductInShelf() != null) {
			Product newProduct = productRepository1.findById(shelfToEdit.getProductInShelf().getId());
			newProduct.getShelvesList().add(shelfToEdit);
			productRepository1.changeEntity(newProduct);
		}
		shelfRepository1.changeEntity(shelfToEdit);
		return ShelfDTO.turnShelfToShelfDTO(shelfRepository1.findById(shelfToEdit.getId()));
	}

	@Transactional
	public void removeShelf(long shelfIdToRemove) {
		if (shelfRepository1.findById(shelfIdToRemove).getProductInShelf() != null) {
			Product oldProduct=shelfRepository1.findById(shelfIdToRemove).getProductInShelf();
			oldProduct.getShelvesList().remove(shelfIdToRemove);
			productRepository1.changeEntity(oldProduct);
		}
		shelfRepository1.deleteEntity(shelfRepository1.findById(shelfIdToRemove));
	}
//

//

}
